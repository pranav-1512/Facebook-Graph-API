{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\prana\\\\OneDrive\\\\Documents\\\\Material\\\\facebook\\\\facebook-insights-app\\\\src\\\\components\\\\Insights.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const Insights = ({ accessToken, pageId }) => {\n//     const [insights, setInsights] = useState([]);\n//     const [error, setError] = useState(null);\n//     const [loading, setLoading] = useState(true);\n//     const [fancount, setFancount] = useState(\"\");\n\n//     useEffect(() => {\n//         const fetchInsights = async () => {\n//             setLoading(true);\n//             try {\n//                 // Fetch page access token first\n//                 const pageTokenResponse = await axios.get(\n//                     `https://graph.facebook.com/v16.0/${pageId}?fields=access_token&access_token=${accessToken}`\n//                 );\n//                 const pageAccessToken = pageTokenResponse.data.access_token;\n\n//                 // Fetch each metric separately\n//                 //   const metrics = ['page_fan_adds_unique', 'page_views_total', 'page_post_engagements', 'page_fans'];\n//                 const metrics = ['page_fans', 'page_views_total', 'page_post_engagements', 'page_impressions'];\n//                 const insightsData = await Promise.all(metrics.map(async (metric) => {\n//                     try {\n//                         // const response = await axios.get(\n//                         //     `https://graph.facebook.com/v16.0/${pageId}/insights`,\n//                         //     {\n//                         //         params: {\n//                         //             metric: metric,\n//                         //             access_token: pageAccessToken,\n//                         //             period: 'day',\n//                         //             date_preset: 'last_30d'\n//                         //         }\n//                         //     }\n//                         // );\n//                         const response = await axios.get(\n//                             `https://graph.facebook.com/v16.0/${pageId}/insights`,\n//                             {\n//                               params: {\n//                                 metric: metric,\n//                                 access_token: pageAccessToken,\n//                                 period: 'day',\n//                                 date_preset: 'today'  // We only need the current value for page_fans\n//                               }\n//                             }\n//                           );\n//                         return response.data.data[0];\n//                     } catch (error) {\n//                         console.warn(`Failed to fetch ${metric}:`, error.response ? error.response.data : error);\n//                         return { name: metric, values: [{ value: 'N/A' }] };\n//                     }\n\n//                 }));\n\n//                 setInsights(insightsData.filter(insight => insight !== null));\n//                 setError(null);\n//             } catch (error) {\n//                 console.error('Error fetching insights:', error.response ? JSON.stringify(error.response.data, null, 2) : error);\n//                 setError(`Failed to fetch insights: ${error.response ? error.response.data.error.message : error.message}`);\n//                 setInsights([]);\n//             } finally {\n//                 setLoading(false);\n//             }\n//         };\n//         const fetchPageFans = async () => {\n//             try {\n//               const response = await axios.get(\n//                 `https://graph.facebook.com/v16.0/${pageId}`,\n//                 {\n//                   params: {\n//                     fields: 'fan_count',\n//                     access_token: accessToken\n//                   }\n//                 }\n//               );\n//               console.log('Page fans:', response.data.fan_count);\n//               setFancount( response.data.fan_count)\n//             } catch (error) {\n//               console.error('Error fetching page fans:', error);\n//               return 'N/A';\n//             }\n//           };\n\n//         if (pageId && accessToken) {\n//             fetchInsights();\n//             fetchPageFans()\n//         }\n//     }, [accessToken, pageId]);\n\n//     if (loading) {\n//         return <div>Loading insights...</div>;\n//     }\n\n//     if (error) {\n//         return <div>{error}</div>;\n//     }\n\n//     // const getInsightValue = (metricName) => {\n//     //     const metric = insights.find(insight => insight && insight.name === metricName);\n//     //     return metric && metric.values && metric.values[0] ? metric.values[0].value : 'N/A';\n//     // };\n\n//     const getInsightValue = (metricName) => {\n//         const metric = insights.find(insight => insight && insight.name === metricName);\n//         if (!metric) {\n//           console.log(`Metric ${metricName} not found`);\n//           return 'N/A';\n//         }\n//         if (!metric.values || metric.values.length === 0) {\n//           console.log(`No values for metric ${metricName}`);\n//           return 'N/A';\n//         }\n//         const value = metric.values[0].value;\n//         if (value === null || value === undefined) {\n//           console.log(`Null or undefined value for metric ${metricName}`);\n//           return 'N/A';\n//         }\n//         // For 'page_fans', we usually just want the latest value\n//         if (metricName === 'page_fans') {\n//           return value;\n//         }\n//         // For other metrics, you might want to sum up values or handle differently\n//         return Array.isArray(value) ? value.reduce((sum, v) => sum + v, 0) : value;\n//       };\n\n//     return (\n//         <div style={{ display: 'flex', justifyContent: 'space-around', flexWrap: 'wrap' }}>\n//             {/* <Card title=\"New Page Likes\" value={getInsightValue('page_fan_adds_unique')} /> */}\n//             <Card title=\"Total Page Likes\" value={getInsightValue('page_fans')} />\n//             <Card title=\"Total Page Views\" value={getInsightValue('page_views_total')} />\n//             <Card title=\"Post Engagements\" value={getInsightValue('page_post_engagements')} />\n//             <Card title=\"Total Page Fans\" value={getInsightValue('page_fans')} />\n//         </div>\n//     );\n// };\n\n// const Card = ({ title, value }) => (\n//     <div style={{ border: '1px solid #ccc', borderRadius: '5px', padding: '10px', margin: '10px', minWidth: '200px' }}>\n//         <h3>{title}</h3>\n//         <p>{value}</p>\n//     </div>\n// );\n\n// export default Insights;\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Insights = ({\n  accessToken,\n  pageId\n}) => {\n  _s();\n  const [insights, setInsights] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [fancount, setFancount] = useState(\"\");\n  const [startDate, setStartDate] = useState(null);\n  const [endDate, setEndDate] = useState(null);\n  useEffect(() => {\n    const fetchInsights = async () => {\n      setLoading(true);\n      try {\n        // Fetch page access token first\n        const pageTokenResponse = await axios.get(`https://graph.facebook.com/v16.0/${pageId}?fields=access_token&access_token=${accessToken}`);\n        const pageAccessToken = pageTokenResponse.data.access_token;\n\n        // Fetch each metric separately\n        const metrics = ['page_fans', 'page_post_engagements', 'page_impressions', 'page_reactions_total'];\n        const insightsData = await Promise.all(metrics.map(async metric => {\n          try {\n            const response = await axios.get(`https://graph.facebook.com/v16.0/${pageId}/insights`, {\n              params: {\n                metric: metric,\n                access_token: pageAccessToken,\n                period: 'total_over_range',\n                since: startDate,\n                until: endDate\n              }\n            });\n            return response.data.data[0];\n          } catch (error) {\n            console.warn(`Failed to fetch ${metric}:`, error.response ? error.response.data : error);\n            return {\n              name: metric,\n              values: [{\n                value: 'N/A'\n              }]\n            };\n          }\n        }));\n        setInsights(insightsData.filter(insight => insight !== null));\n        setError(null);\n      } catch (error) {\n        console.error('Error fetching insights:', error.response ? JSON.stringify(error.response.data, null, 2) : error);\n        setError(`Failed to fetch insights: ${error.response ? error.response.data.error.message : error.message}`);\n        setInsights([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    const fetchPageFans = async () => {\n      try {\n        const response = await axios.get(`https://graph.facebook.com/v16.0/${pageId}`, {\n          params: {\n            fields: 'fan_count',\n            access_token: accessToken\n          }\n        });\n        console.log('Page fans:', response.data.fan_count);\n        setFancount(response.data.fan_count);\n      } catch (error) {\n        console.error('Error fetching page fans:', error);\n        return 'N/A';\n      }\n    };\n    if (pageId && accessToken) {\n      fetchInsights();\n      fetchPageFans();\n    }\n  }, [accessToken, pageId]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading insights...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 12\n    }, this);\n  }\n\n  // const getInsightValue = (metricName) => {\n  //     const metric = insights.find(insight => insight && insight.name === metricName);\n  //     return metric && metric.values && metric.values[0] ? metric.values[0].value : 'N/A';\n  // };\n\n  const getInsightValue = metricName => {\n    const metric = insights.find(insight => insight && insight.name === metricName);\n    if (!metric) {\n      console.log(`Metric ${metricName} not found`);\n      return 'N/A';\n    }\n    if (!metric.values || metric.values.length === 0) {\n      console.log(`No values for metric ${metricName}`);\n      return 'N/A';\n    }\n    const value = metric.values[0].value;\n    if (value === null || value === undefined) {\n      console.log(`Null or undefined value for metric ${metricName}`);\n      return 'N/A';\n    }\n    // For 'page_fans', we usually just want the latest value\n    if (metricName === 'page_fans') {\n      return value;\n    }\n    // For other metrics, you might want to sum up values or handle differently\n    return Array.isArray(value) ? value.reduce((sum, v) => sum + v, 0) : value;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'space-around',\n      flexWrap: 'wrap'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      title: \"Total Page Likes\",\n      value: getInsightValue('page_fans')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      title: \"Total Page Views\",\n      value: getInsightValue('page_views_total')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      title: \"Post Engagements\",\n      value: getInsightValue('page_post_engagements')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      title: \"Total Page Fans\",\n      value: getInsightValue('page_fans')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 263,\n    columnNumber: 5\n  }, this);\n};\n_s(Insights, \"o0FZwTW8w+9nb1w4BU7tlb28PPo=\");\n_c = Insights;\nconst Card = ({\n  title,\n  value\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  style: {\n    border: '1px solid #ccc',\n    borderRadius: '5px',\n    padding: '10px',\n    margin: '10px',\n    minWidth: '200px'\n  },\n  children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n    children: title\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 275,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 276,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 274,\n  columnNumber: 3\n}, this);\n_c2 = Card;\nexport default Insights;\nvar _c, _c2;\n$RefreshReg$(_c, \"Insights\");\n$RefreshReg$(_c2, \"Card\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Insights","accessToken","pageId","_s","insights","setInsights","error","setError","loading","setLoading","fancount","setFancount","startDate","setStartDate","endDate","setEndDate","fetchInsights","pageTokenResponse","get","pageAccessToken","data","access_token","metrics","insightsData","Promise","all","map","metric","response","params","period","since","until","console","warn","name","values","value","filter","insight","JSON","stringify","message","fetchPageFans","fields","log","fan_count","children","fileName","_jsxFileName","lineNumber","columnNumber","getInsightValue","metricName","find","length","undefined","Array","isArray","reduce","sum","v","style","display","justifyContent","flexWrap","Card","title","_c","border","borderRadius","padding","margin","minWidth","_c2","$RefreshReg$"],"sources":["C:/Users/prana/OneDrive/Documents/Material/facebook/facebook-insights-app/src/components/Insights.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n\r\n// const Insights = ({ accessToken, pageId }) => {\r\n//     const [insights, setInsights] = useState([]);\r\n//     const [error, setError] = useState(null);\r\n//     const [loading, setLoading] = useState(true);\r\n//     const [fancount, setFancount] = useState(\"\");\r\n\r\n//     useEffect(() => {\r\n//         const fetchInsights = async () => {\r\n//             setLoading(true);\r\n//             try {\r\n//                 // Fetch page access token first\r\n//                 const pageTokenResponse = await axios.get(\r\n//                     `https://graph.facebook.com/v16.0/${pageId}?fields=access_token&access_token=${accessToken}`\r\n//                 );\r\n//                 const pageAccessToken = pageTokenResponse.data.access_token;\r\n\r\n//                 // Fetch each metric separately\r\n//                 //   const metrics = ['page_fan_adds_unique', 'page_views_total', 'page_post_engagements', 'page_fans'];\r\n//                 const metrics = ['page_fans', 'page_views_total', 'page_post_engagements', 'page_impressions'];\r\n//                 const insightsData = await Promise.all(metrics.map(async (metric) => {\r\n//                     try {\r\n//                         // const response = await axios.get(\r\n//                         //     `https://graph.facebook.com/v16.0/${pageId}/insights`,\r\n//                         //     {\r\n//                         //         params: {\r\n//                         //             metric: metric,\r\n//                         //             access_token: pageAccessToken,\r\n//                         //             period: 'day',\r\n//                         //             date_preset: 'last_30d'\r\n//                         //         }\r\n//                         //     }\r\n//                         // );\r\n//                         const response = await axios.get(\r\n//                             `https://graph.facebook.com/v16.0/${pageId}/insights`,\r\n//                             {\r\n//                               params: {\r\n//                                 metric: metric,\r\n//                                 access_token: pageAccessToken,\r\n//                                 period: 'day',\r\n//                                 date_preset: 'today'  // We only need the current value for page_fans\r\n//                               }\r\n//                             }\r\n//                           );\r\n//                         return response.data.data[0];\r\n//                     } catch (error) {\r\n//                         console.warn(`Failed to fetch ${metric}:`, error.response ? error.response.data : error);\r\n//                         return { name: metric, values: [{ value: 'N/A' }] };\r\n//                     }\r\n\r\n//                 }));\r\n\r\n//                 setInsights(insightsData.filter(insight => insight !== null));\r\n//                 setError(null);\r\n//             } catch (error) {\r\n//                 console.error('Error fetching insights:', error.response ? JSON.stringify(error.response.data, null, 2) : error);\r\n//                 setError(`Failed to fetch insights: ${error.response ? error.response.data.error.message : error.message}`);\r\n//                 setInsights([]);\r\n//             } finally {\r\n//                 setLoading(false);\r\n//             }\r\n//         };\r\n//         const fetchPageFans = async () => {\r\n//             try {\r\n//               const response = await axios.get(\r\n//                 `https://graph.facebook.com/v16.0/${pageId}`,\r\n//                 {\r\n//                   params: {\r\n//                     fields: 'fan_count',\r\n//                     access_token: accessToken\r\n//                   }\r\n//                 }\r\n//               );\r\n//               console.log('Page fans:', response.data.fan_count);\r\n//               setFancount( response.data.fan_count)\r\n//             } catch (error) {\r\n//               console.error('Error fetching page fans:', error);\r\n//               return 'N/A';\r\n//             }\r\n//           };\r\n\r\n//         if (pageId && accessToken) {\r\n//             fetchInsights();\r\n//             fetchPageFans()\r\n//         }\r\n//     }, [accessToken, pageId]);\r\n\r\n//     if (loading) {\r\n//         return <div>Loading insights...</div>;\r\n//     }\r\n\r\n//     if (error) {\r\n//         return <div>{error}</div>;\r\n//     }\r\n\r\n//     // const getInsightValue = (metricName) => {\r\n//     //     const metric = insights.find(insight => insight && insight.name === metricName);\r\n//     //     return metric && metric.values && metric.values[0] ? metric.values[0].value : 'N/A';\r\n//     // };\r\n\r\n//     const getInsightValue = (metricName) => {\r\n//         const metric = insights.find(insight => insight && insight.name === metricName);\r\n//         if (!metric) {\r\n//           console.log(`Metric ${metricName} not found`);\r\n//           return 'N/A';\r\n//         }\r\n//         if (!metric.values || metric.values.length === 0) {\r\n//           console.log(`No values for metric ${metricName}`);\r\n//           return 'N/A';\r\n//         }\r\n//         const value = metric.values[0].value;\r\n//         if (value === null || value === undefined) {\r\n//           console.log(`Null or undefined value for metric ${metricName}`);\r\n//           return 'N/A';\r\n//         }\r\n//         // For 'page_fans', we usually just want the latest value\r\n//         if (metricName === 'page_fans') {\r\n//           return value;\r\n//         }\r\n//         // For other metrics, you might want to sum up values or handle differently\r\n//         return Array.isArray(value) ? value.reduce((sum, v) => sum + v, 0) : value;\r\n//       };\r\n\r\n//     return (\r\n//         <div style={{ display: 'flex', justifyContent: 'space-around', flexWrap: 'wrap' }}>\r\n//             {/* <Card title=\"New Page Likes\" value={getInsightValue('page_fan_adds_unique')} /> */}\r\n//             <Card title=\"Total Page Likes\" value={getInsightValue('page_fans')} />\r\n//             <Card title=\"Total Page Views\" value={getInsightValue('page_views_total')} />\r\n//             <Card title=\"Post Engagements\" value={getInsightValue('page_post_engagements')} />\r\n//             <Card title=\"Total Page Fans\" value={getInsightValue('page_fans')} />\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// const Card = ({ title, value }) => (\r\n//     <div style={{ border: '1px solid #ccc', borderRadius: '5px', padding: '10px', margin: '10px', minWidth: '200px' }}>\r\n//         <h3>{title}</h3>\r\n//         <p>{value}</p>\r\n//     </div>\r\n// );\r\n\r\n// export default Insights;\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Insights = ({ accessToken, pageId }) => {\r\n  const [insights, setInsights] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [fancount, setFancount] = useState(\"\");\r\n  const [startDate, setStartDate] = useState(null);\r\n  const [endDate, setEndDate] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchInsights = async () => {\r\n      setLoading(true);\r\n      try {\r\n          // Fetch page access token first\r\n          const pageTokenResponse = await axios.get(\r\n              `https://graph.facebook.com/v16.0/${pageId}?fields=access_token&access_token=${accessToken}`\r\n          );\r\n          const pageAccessToken = pageTokenResponse.data.access_token;\r\n  \r\n          // Fetch each metric separately\r\n          const metrics = ['page_fans', 'page_post_engagements', 'page_impressions', 'page_reactions_total'];\r\n          const insightsData = await Promise.all(metrics.map(async (metric) => {\r\n              try {\r\n                  const response = await axios.get(\r\n                      `https://graph.facebook.com/v16.0/${pageId}/insights`,\r\n                      {\r\n                          params: {\r\n                              metric: metric,\r\n                              access_token: pageAccessToken,\r\n                              period: 'total_over_range',\r\n                              since: startDate,\r\n                              until: endDate\r\n                          }\r\n                      }\r\n                  );\r\n                  return response.data.data[0];\r\n              } catch (error) {\r\n                  console.warn(`Failed to fetch ${metric}:`, error.response ? error.response.data : error);\r\n                  return { name: metric, values: [{ value: 'N/A' }] };\r\n              }\r\n          }));\r\n  \r\n          setInsights(insightsData.filter(insight => insight !== null));\r\n          setError(null);\r\n      } catch (error) {\r\n          console.error('Error fetching insights:', error.response ? JSON.stringify(error.response.data, null, 2) : error);\r\n          setError(`Failed to fetch insights: ${error.response ? error.response.data.error.message : error.message}`);\r\n          setInsights([]);\r\n      } finally {\r\n          setLoading(false);\r\n      }\r\n  };\r\n    const fetchPageFans = async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          `https://graph.facebook.com/v16.0/${pageId}`,\r\n          {\r\n            params: {\r\n              fields: 'fan_count',\r\n              access_token: accessToken\r\n            }\r\n          }\r\n        );\r\n        console.log('Page fans:', response.data.fan_count);\r\n        setFancount(response.data.fan_count)\r\n      } catch (error) {\r\n        console.error('Error fetching page fans:', error);\r\n        return 'N/A';\r\n      }\r\n    };\r\n\r\n    if (pageId && accessToken) {\r\n      fetchInsights();\r\n      fetchPageFans()\r\n    }\r\n  }, [accessToken, pageId]);\r\n\r\n  if (loading) {\r\n    return <div>Loading insights...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div>{error}</div>;\r\n  }\r\n\r\n  // const getInsightValue = (metricName) => {\r\n  //     const metric = insights.find(insight => insight && insight.name === metricName);\r\n  //     return metric && metric.values && metric.values[0] ? metric.values[0].value : 'N/A';\r\n  // };\r\n\r\n  const getInsightValue = (metricName) => {\r\n    const metric = insights.find(insight => insight && insight.name === metricName);\r\n    if (!metric) {\r\n      console.log(`Metric ${metricName} not found`);\r\n      return 'N/A';\r\n    }\r\n    if (!metric.values || metric.values.length === 0) {\r\n      console.log(`No values for metric ${metricName}`);\r\n      return 'N/A';\r\n    }\r\n    const value = metric.values[0].value;\r\n    if (value === null || value === undefined) {\r\n      console.log(`Null or undefined value for metric ${metricName}`);\r\n      return 'N/A';\r\n    }\r\n    // For 'page_fans', we usually just want the latest value\r\n    if (metricName === 'page_fans') {\r\n      return value;\r\n    }\r\n    // For other metrics, you might want to sum up values or handle differently\r\n    return Array.isArray(value) ? value.reduce((sum, v) => sum + v, 0) : value;\r\n  };\r\n\r\n  return (\r\n    <div style={{ display: 'flex', justifyContent: 'space-around', flexWrap: 'wrap' }}>\r\n      {/* <Card title=\"New Page Likes\" value={getInsightValue('page_fan_adds_unique')} /> */}\r\n      <Card title=\"Total Page Likes\" value={getInsightValue('page_fans')} />\r\n      <Card title=\"Total Page Views\" value={getInsightValue('page_views_total')} />\r\n      <Card title=\"Post Engagements\" value={getInsightValue('page_post_engagements')} />\r\n      <Card title=\"Total Page Fans\" value={getInsightValue('page_fans')} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Card = ({ title, value }) => (\r\n  <div style={{ border: '1px solid #ccc', borderRadius: '5px', padding: '10px', margin: '10px', minWidth: '200px' }}>\r\n    <h3>{title}</h3>\r\n    <p>{value}</p>\r\n  </div>\r\n);\r\n\r\nexport default Insights;"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,WAAW;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACiB,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACmB,OAAO,EAAEC,UAAU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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}