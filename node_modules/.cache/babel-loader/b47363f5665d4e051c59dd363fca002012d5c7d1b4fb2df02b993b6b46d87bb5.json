{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\prana\\\\OneDrive\\\\Documents\\\\Material\\\\facebook\\\\facebook-insights-app\\\\src\\\\components\\\\Insights.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const Insights = ({ accessToken, pageId }) => {\n//     const [insights, setInsights] = useState([]);\n//     const [error, setError] = useState(null);\n//     const [loading, setLoading] = useState(true);\n//     const [fancount, setFancount] = useState(\"\");\n\n//     useEffect(() => {\n//         const fetchInsights = async () => {\n//             setLoading(true);\n//             try {\n//                 // Fetch page access token first\n//                 const pageTokenResponse = await axios.get(\n//                     `https://graph.facebook.com/v16.0/${pageId}?fields=access_token&access_token=${accessToken}`\n//                 );\n//                 const pageAccessToken = pageTokenResponse.data.access_token;\n\n//                 // Fetch each metric separately\n//                 //   const metrics = ['page_fan_adds_unique', 'page_views_total', 'page_post_engagements', 'page_fans'];\n//                 const metrics = ['page_fans', 'page_views_total', 'page_post_engagements', 'page_impressions'];\n//                 const insightsData = await Promise.all(metrics.map(async (metric) => {\n//                     try {\n//                         // const response = await axios.get(\n//                         //     `https://graph.facebook.com/v16.0/${pageId}/insights`,\n//                         //     {\n//                         //         params: {\n//                         //             metric: metric,\n//                         //             access_token: pageAccessToken,\n//                         //             period: 'day',\n//                         //             date_preset: 'last_30d'\n//                         //         }\n//                         //     }\n//                         // );\n//                         const response = await axios.get(\n//                             `https://graph.facebook.com/v16.0/${pageId}/insights`,\n//                             {\n//                               params: {\n//                                 metric: metric,\n//                                 access_token: pageAccessToken,\n//                                 period: 'day',\n//                                 date_preset: 'today'  // We only need the current value for page_fans\n//                               }\n//                             }\n//                           );\n//                         return response.data.data[0];\n//                     } catch (error) {\n//                         console.warn(`Failed to fetch ${metric}:`, error.response ? error.response.data : error);\n//                         return { name: metric, values: [{ value: 'N/A' }] };\n//                     }\n\n//                 }));\n\n//                 setInsights(insightsData.filter(insight => insight !== null));\n//                 setError(null);\n//             } catch (error) {\n//                 console.error('Error fetching insights:', error.response ? JSON.stringify(error.response.data, null, 2) : error);\n//                 setError(`Failed to fetch insights: ${error.response ? error.response.data.error.message : error.message}`);\n//                 setInsights([]);\n//             } finally {\n//                 setLoading(false);\n//             }\n//         };\n//         const fetchPageFans = async () => {\n//             try {\n//               const response = await axios.get(\n//                 `https://graph.facebook.com/v16.0/${pageId}`,\n//                 {\n//                   params: {\n//                     fields: 'fan_count',\n//                     access_token: accessToken\n//                   }\n//                 }\n//               );\n//               console.log('Page fans:', response.data.fan_count);\n//               setFancount( response.data.fan_count)\n//             } catch (error) {\n//               console.error('Error fetching page fans:', error);\n//               return 'N/A';\n//             }\n//           };\n\n//         if (pageId && accessToken) {\n//             fetchInsights();\n//             fetchPageFans()\n//         }\n//     }, [accessToken, pageId]);\n\n//     if (loading) {\n//         return <div>Loading insights...</div>;\n//     }\n\n//     if (error) {\n//         return <div>{error}</div>;\n//     }\n\n//     // const getInsightValue = (metricName) => {\n//     //     const metric = insights.find(insight => insight && insight.name === metricName);\n//     //     return metric && metric.values && metric.values[0] ? metric.values[0].value : 'N/A';\n//     // };\n\n//     const getInsightValue = (metricName) => {\n//         const metric = insights.find(insight => insight && insight.name === metricName);\n//         if (!metric) {\n//           console.log(`Metric ${metricName} not found`);\n//           return 'N/A';\n//         }\n//         if (!metric.values || metric.values.length === 0) {\n//           console.log(`No values for metric ${metricName}`);\n//           return 'N/A';\n//         }\n//         const value = metric.values[0].value;\n//         if (value === null || value === undefined) {\n//           console.log(`Null or undefined value for metric ${metricName}`);\n//           return 'N/A';\n//         }\n//         // For 'page_fans', we usually just want the latest value\n//         if (metricName === 'page_fans') {\n//           return value;\n//         }\n//         // For other metrics, you might want to sum up values or handle differently\n//         return Array.isArray(value) ? value.reduce((sum, v) => sum + v, 0) : value;\n//       };\n\n//     return (\n//         <div style={{ display: 'flex', justifyContent: 'space-around', flexWrap: 'wrap' }}>\n//             {/* <Card title=\"New Page Likes\" value={getInsightValue('page_fan_adds_unique')} /> */}\n//             <Card title=\"Total Page Likes\" value={getInsightValue('page_fans')} />\n//             <Card title=\"Total Page Views\" value={getInsightValue('page_views_total')} />\n//             <Card title=\"Post Engagements\" value={getInsightValue('page_post_engagements')} />\n//             <Card title=\"Total Page Fans\" value={getInsightValue('page_fans')} />\n//         </div>\n//     );\n// };\n\n// const Card = ({ title, value }) => (\n//     <div style={{ border: '1px solid #ccc', borderRadius: '5px', padding: '10px', margin: '10px', minWidth: '200px' }}>\n//         <h3>{title}</h3>\n//         <p>{value}</p>\n//     </div>\n// );\n\n// export default Insights;\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Insights = ({\n  accessToken,\n  pageId\n}) => {\n  _s();\n  const [insights, setInsights] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [fancount, setFancount] = useState(\"\");\n  const [startDate, setStartDate] = useState(() => {\n    const date = new Date();\n    date.setDate(date.getDate() - 30); // 30 days ago\n    return date.toISOString().split('T')[0];\n  });\n  const [endDate, setEndDate] = useState(() => {\n    const date = new Date();\n    return date.toISOString().split('T')[0];\n  });\n  const handleStartDateChange = event => {\n    setStartDate(event.target.value);\n    console.log(\"New start date:\", event.target.value);\n  };\n  const handleEndDateChange = event => {\n    setEndDate(event.target.value);\n    console.log(\"New end date:\", event.target.value);\n  };\n  useEffect(() => {\n    const fetchInsights = async () => {\n      setLoading(true);\n      try {\n        // Fetch page access token first\n        const pageTokenResponse = await axios.get(`https://graph.facebook.com/v16.0/${pageId}?fields=access_token&access_token=${accessToken}`);\n        const pageAccessToken = pageTokenResponse.data.access_token;\n\n        // Fetch each metric separately\n        const metrics = ['page_fans', 'page_post_engagements', 'page_impressions', 'page_reactions_total'];\n        const insightsData = await Promise.all(metrics.map(async metric => {\n          try {\n            const response = await axios.get(`https://graph.facebook.com/v16.0/${pageId}/insights`, {\n              params: {\n                metric: metric,\n                access_token: pageAccessToken,\n                period: 'total_over_range',\n                since: startDate,\n                until: endDate\n              }\n            });\n            return response.data.data[0];\n          } catch (error) {\n            console.warn(`Failed to fetch ${metric}:`, error.response ? error.response.data : error);\n            return {\n              name: metric,\n              values: [{\n                value: 'N/A'\n              }]\n            };\n          }\n        }));\n        setInsights(insightsData.filter(insight => insight !== null));\n        console.log(\"Updated insights:\", insightsData.filter(insight => insight !== null));\n        setError(null);\n      } catch (error) {\n        console.error('Error fetching insights:', error.response ? JSON.stringify(error.response.data, null, 2) : error);\n        setError(`Failed to fetch insights: ${error.response ? error.response.data.error.message : error.message}`);\n        setInsights([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    const fetchPageFans = async () => {\n      try {\n        const response = await axios.get(`https://graph.facebook.com/v16.0/${pageId}`, {\n          params: {\n            fields: 'fan_count',\n            access_token: accessToken\n          }\n        });\n        console.log('Page fans:', response.data.fan_count);\n        setFancount(response.data.fan_count);\n      } catch (error) {\n        console.error('Error fetching page fans:', error);\n        return 'N/A';\n      }\n    };\n    console.log(\"Effect triggered. PageId:\", pageId, \"AccessToken:\", !!accessToken, \"StartDate:\", startDate, \"EndDate:\", endDate);\n    if (pageId && accessToken && startDate && endDate) {\n      console.log(\"Fetching insights...\");\n      fetchInsights();\n      fetchPageFans();\n    }\n  }, [accessToken, pageId, startDate, endDate]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading insights...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 12\n    }, this);\n  }\n\n  // const getInsightValue = (metricName) => {\n  //     const metric = insights.find(insight => insight && insight.name === metricName);\n  //     return metric && metric.values && metric.values[0] ? metric.values[0].value : 'N/A';\n  // };\n\n  const getInsightValue = metricName => {\n    console.log(`Getting value for metric: ${metricName}`);\n    const metric = insights.find(insight => insight && insight.name === metricName);\n    console.log(`Found metric:`, metric);\n    if (!metric) {\n      console.log(`Metric ${metricName} not found`);\n      return 'N/A';\n    }\n    if (!metric.values || metric.values.length === 0) {\n      console.log(`No values for metric ${metricName}`);\n      return 'N/A';\n    }\n    const value = metric.values[0].value;\n    if (value === null || value === undefined) {\n      console.log(`Null or undefined value for metric ${metricName}`);\n      return 'N/A';\n    }\n    // For 'page_fans', we usually just want the latest value\n    if (metricName === 'page_fans') {\n      return value;\n    }\n    // For other metrics, you might want to sum up values or handle differently\n    return Array.isArray(value) ? value.reduce((sum, v) => sum + v, 0) : value;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'space-around',\n      flexWrap: 'wrap'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Start Date:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          value: startDate,\n          onChange: handleStartDateChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"End Date:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          value: endDate,\n          onChange: handleEndDateChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      title: \"Total Followers / Fans\",\n      value: getInsightValue('page_fans')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      title: \"Total Engagement\",\n      value: getInsightValue('page_post_engagements')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      title: \"Total Impressions\",\n      value: getInsightValue('page_impressions')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      title: \"Total Reactions\",\n      value: getInsightValue('page_reactions_total')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 288,\n    columnNumber: 5\n  }, this);\n};\n_s(Insights, \"KjbwAHdlsmpbfeQiBRNJWxyy3gM=\");\n_c = Insights;\nconst Card = ({\n  title,\n  value\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  style: {\n    border: '1px solid #ccc',\n    borderRadius: '5px',\n    padding: '10px',\n    margin: '10px',\n    minWidth: '200px'\n  },\n  children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n    children: title\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 309,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 310,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 308,\n  columnNumber: 3\n}, this);\n_c2 = Card;\nexport default Insights;\nvar _c, _c2;\n$RefreshReg$(_c, \"Insights\");\n$RefreshReg$(_c2, \"Card\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Insights","accessToken","pageId","_s","insights","setInsights","error","setError","loading","setLoading","fancount","setFancount","startDate","setStartDate","date","Date","setDate","getDate","toISOString","split","endDate","setEndDate","handleStartDateChange","event","target","value","console","log","handleEndDateChange","fetchInsights","pageTokenResponse","get","pageAccessToken","data","access_token","metrics","insightsData","Promise","all","map","metric","response","params","period","since","until","warn","name","values","filter","insight","JSON","stringify","message","fetchPageFans","fields","fan_count","children","fileName","_jsxFileName","lineNumber","columnNumber","getInsightValue","metricName","find","length","undefined","Array","isArray","reduce","sum","v","style","display","justifyContent","flexWrap","type","onChange","Card","title","_c","border","borderRadius","padding","margin","minWidth","_c2","$RefreshReg$"],"sources":["C:/Users/prana/OneDrive/Documents/Material/facebook/facebook-insights-app/src/components/Insights.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n\r\n// const Insights = ({ accessToken, pageId }) => {\r\n//     const [insights, setInsights] = useState([]);\r\n//     const [error, setError] = useState(null);\r\n//     const [loading, setLoading] = useState(true);\r\n//     const [fancount, setFancount] = useState(\"\");\r\n\r\n//     useEffect(() => {\r\n//         const fetchInsights = async () => {\r\n//             setLoading(true);\r\n//             try {\r\n//                 // Fetch page access token first\r\n//                 const pageTokenResponse = await axios.get(\r\n//                     `https://graph.facebook.com/v16.0/${pageId}?fields=access_token&access_token=${accessToken}`\r\n//                 );\r\n//                 const pageAccessToken = pageTokenResponse.data.access_token;\r\n\r\n//                 // Fetch each metric separately\r\n//                 //   const metrics = ['page_fan_adds_unique', 'page_views_total', 'page_post_engagements', 'page_fans'];\r\n//                 const metrics = ['page_fans', 'page_views_total', 'page_post_engagements', 'page_impressions'];\r\n//                 const insightsData = await Promise.all(metrics.map(async (metric) => {\r\n//                     try {\r\n//                         // const response = await axios.get(\r\n//                         //     `https://graph.facebook.com/v16.0/${pageId}/insights`,\r\n//                         //     {\r\n//                         //         params: {\r\n//                         //             metric: metric,\r\n//                         //             access_token: pageAccessToken,\r\n//                         //             period: 'day',\r\n//                         //             date_preset: 'last_30d'\r\n//                         //         }\r\n//                         //     }\r\n//                         // );\r\n//                         const response = await axios.get(\r\n//                             `https://graph.facebook.com/v16.0/${pageId}/insights`,\r\n//                             {\r\n//                               params: {\r\n//                                 metric: metric,\r\n//                                 access_token: pageAccessToken,\r\n//                                 period: 'day',\r\n//                                 date_preset: 'today'  // We only need the current value for page_fans\r\n//                               }\r\n//                             }\r\n//                           );\r\n//                         return response.data.data[0];\r\n//                     } catch (error) {\r\n//                         console.warn(`Failed to fetch ${metric}:`, error.response ? error.response.data : error);\r\n//                         return { name: metric, values: [{ value: 'N/A' }] };\r\n//                     }\r\n\r\n//                 }));\r\n\r\n//                 setInsights(insightsData.filter(insight => insight !== null));\r\n//                 setError(null);\r\n//             } catch (error) {\r\n//                 console.error('Error fetching insights:', error.response ? JSON.stringify(error.response.data, null, 2) : error);\r\n//                 setError(`Failed to fetch insights: ${error.response ? error.response.data.error.message : error.message}`);\r\n//                 setInsights([]);\r\n//             } finally {\r\n//                 setLoading(false);\r\n//             }\r\n//         };\r\n//         const fetchPageFans = async () => {\r\n//             try {\r\n//               const response = await axios.get(\r\n//                 `https://graph.facebook.com/v16.0/${pageId}`,\r\n//                 {\r\n//                   params: {\r\n//                     fields: 'fan_count',\r\n//                     access_token: accessToken\r\n//                   }\r\n//                 }\r\n//               );\r\n//               console.log('Page fans:', response.data.fan_count);\r\n//               setFancount( response.data.fan_count)\r\n//             } catch (error) {\r\n//               console.error('Error fetching page fans:', error);\r\n//               return 'N/A';\r\n//             }\r\n//           };\r\n\r\n//         if (pageId && accessToken) {\r\n//             fetchInsights();\r\n//             fetchPageFans()\r\n//         }\r\n//     }, [accessToken, pageId]);\r\n\r\n//     if (loading) {\r\n//         return <div>Loading insights...</div>;\r\n//     }\r\n\r\n//     if (error) {\r\n//         return <div>{error}</div>;\r\n//     }\r\n\r\n//     // const getInsightValue = (metricName) => {\r\n//     //     const metric = insights.find(insight => insight && insight.name === metricName);\r\n//     //     return metric && metric.values && metric.values[0] ? metric.values[0].value : 'N/A';\r\n//     // };\r\n\r\n//     const getInsightValue = (metricName) => {\r\n//         const metric = insights.find(insight => insight && insight.name === metricName);\r\n//         if (!metric) {\r\n//           console.log(`Metric ${metricName} not found`);\r\n//           return 'N/A';\r\n//         }\r\n//         if (!metric.values || metric.values.length === 0) {\r\n//           console.log(`No values for metric ${metricName}`);\r\n//           return 'N/A';\r\n//         }\r\n//         const value = metric.values[0].value;\r\n//         if (value === null || value === undefined) {\r\n//           console.log(`Null or undefined value for metric ${metricName}`);\r\n//           return 'N/A';\r\n//         }\r\n//         // For 'page_fans', we usually just want the latest value\r\n//         if (metricName === 'page_fans') {\r\n//           return value;\r\n//         }\r\n//         // For other metrics, you might want to sum up values or handle differently\r\n//         return Array.isArray(value) ? value.reduce((sum, v) => sum + v, 0) : value;\r\n//       };\r\n\r\n//     return (\r\n//         <div style={{ display: 'flex', justifyContent: 'space-around', flexWrap: 'wrap' }}>\r\n//             {/* <Card title=\"New Page Likes\" value={getInsightValue('page_fan_adds_unique')} /> */}\r\n//             <Card title=\"Total Page Likes\" value={getInsightValue('page_fans')} />\r\n//             <Card title=\"Total Page Views\" value={getInsightValue('page_views_total')} />\r\n//             <Card title=\"Post Engagements\" value={getInsightValue('page_post_engagements')} />\r\n//             <Card title=\"Total Page Fans\" value={getInsightValue('page_fans')} />\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// const Card = ({ title, value }) => (\r\n//     <div style={{ border: '1px solid #ccc', borderRadius: '5px', padding: '10px', margin: '10px', minWidth: '200px' }}>\r\n//         <h3>{title}</h3>\r\n//         <p>{value}</p>\r\n//     </div>\r\n// );\r\n\r\n// export default Insights;\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Insights = ({ accessToken, pageId }) => {\r\n  const [insights, setInsights] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [fancount, setFancount] = useState(\"\");\r\n  \r\n  const [startDate, setStartDate] = useState(() => {\r\n    const date = new Date();\r\n    date.setDate(date.getDate() - 30); // 30 days ago\r\n    return date.toISOString().split('T')[0];\r\n  });\r\n  \r\n  const [endDate, setEndDate] = useState(() => {\r\n    const date = new Date();\r\n    return date.toISOString().split('T')[0];\r\n  });\r\n\r\n  const handleStartDateChange = (event) => {\r\n    setStartDate(event.target.value);\r\n    console.log(\"New start date:\", event.target.value);\r\n  };\r\n\r\n  const handleEndDateChange = (event) => {\r\n    setEndDate(event.target.value);\r\n    console.log(\"New end date:\", event.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchInsights = async () => {\r\n      setLoading(true);\r\n      try {\r\n        // Fetch page access token first\r\n        const pageTokenResponse = await axios.get(\r\n          `https://graph.facebook.com/v16.0/${pageId}?fields=access_token&access_token=${accessToken}`\r\n        );\r\n        const pageAccessToken = pageTokenResponse.data.access_token;\r\n\r\n        // Fetch each metric separately\r\n        const metrics = ['page_fans', 'page_post_engagements', 'page_impressions', 'page_reactions_total'];\r\n        const insightsData = await Promise.all(metrics.map(async (metric) => {\r\n          try {\r\n            const response = await axios.get(\r\n              `https://graph.facebook.com/v16.0/${pageId}/insights`,\r\n              {\r\n                params: {\r\n                  metric: metric,\r\n                  access_token: pageAccessToken,\r\n                  period: 'total_over_range',\r\n                  since: startDate,\r\n                  until: endDate\r\n                }\r\n              }\r\n            );\r\n            return response.data.data[0];\r\n          } catch (error) {\r\n            console.warn(`Failed to fetch ${metric}:`, error.response ? error.response.data : error);\r\n            return { name: metric, values: [{ value: 'N/A' }] };\r\n          }\r\n        }));\r\n\r\n        setInsights(insightsData.filter(insight => insight !== null));\r\n        console.log(\"Updated insights:\", insightsData.filter(insight => insight !== null));\r\n        setError(null);\r\n      } catch (error) {\r\n        console.error('Error fetching insights:', error.response ? JSON.stringify(error.response.data, null, 2) : error);\r\n        setError(`Failed to fetch insights: ${error.response ? error.response.data.error.message : error.message}`);\r\n        setInsights([]);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    const fetchPageFans = async () => {\r\n      try {\r\n        const response = await axios.get(\r\n          `https://graph.facebook.com/v16.0/${pageId}`,\r\n          {\r\n            params: {\r\n              fields: 'fan_count',\r\n              access_token: accessToken\r\n            }\r\n          }\r\n        );\r\n        console.log('Page fans:', response.data.fan_count);\r\n        setFancount(response.data.fan_count)\r\n      } catch (error) {\r\n        console.error('Error fetching page fans:', error);\r\n        return 'N/A';\r\n      }\r\n    };\r\n\r\n    console.log(\"Effect triggered. PageId:\", pageId, \"AccessToken:\", !!accessToken, \"StartDate:\", startDate, \"EndDate:\", endDate);\r\n    if (pageId && accessToken && startDate && endDate) {\r\n      console.log(\"Fetching insights...\");\r\n      fetchInsights();\r\n      fetchPageFans();\r\n    }\r\n  }, [accessToken, pageId, startDate, endDate]);\r\n\r\n  if (loading) {\r\n    return <div>Loading insights...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div>{error}</div>;\r\n  }\r\n\r\n  // const getInsightValue = (metricName) => {\r\n  //     const metric = insights.find(insight => insight && insight.name === metricName);\r\n  //     return metric && metric.values && metric.values[0] ? metric.values[0].value : 'N/A';\r\n  // };\r\n\r\n  const getInsightValue = (metricName) => {\r\n    console.log(`Getting value for metric: ${metricName}`);\r\n    const metric = insights.find(insight => insight && insight.name === metricName);\r\n    console.log(`Found metric:`, metric);\r\n    if (!metric) {\r\n      console.log(`Metric ${metricName} not found`);\r\n      return 'N/A';\r\n    }\r\n    if (!metric.values || metric.values.length === 0) {\r\n      console.log(`No values for metric ${metricName}`);\r\n      return 'N/A';\r\n    }\r\n    const value = metric.values[0].value;\r\n    if (value === null || value === undefined) {\r\n      console.log(`Null or undefined value for metric ${metricName}`);\r\n      return 'N/A';\r\n    }\r\n    // For 'page_fans', we usually just want the latest value\r\n    if (metricName === 'page_fans') {\r\n      return value;\r\n    }\r\n    // For other metrics, you might want to sum up values or handle differently\r\n    return Array.isArray(value) ? value.reduce((sum, v) => sum + v, 0) : value;\r\n  };\r\n\r\n\r\n  return (\r\n    <div style={{ display: 'flex', justifyContent: 'space-around', flexWrap: 'wrap' }}>\r\n      <div>\r\n        <label>\r\n          Start Date:\r\n          <input type=\"date\" value={startDate} onChange={handleStartDateChange} />\r\n        </label>\r\n        <label>\r\n          End Date:\r\n          <input type=\"date\" value={endDate} onChange={handleEndDateChange} />\r\n        </label>\r\n      </div>\r\n      <Card title=\"Total Followers / Fans\" value={getInsightValue('page_fans')} />\r\n      <Card title=\"Total Engagement\" value={getInsightValue('page_post_engagements')} />\r\n      <Card title=\"Total Impressions\" value={getInsightValue('page_impressions')} />\r\n      <Card title=\"Total Reactions\" value={getInsightValue('page_reactions_total')} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Card = ({ title, value }) => (\r\n  <div style={{ border: '1px solid #ccc', borderRadius: '5px', padding: '10px', margin: '10px', minWidth: '200px' }}>\r\n    <h3>{title}</h3>\r\n    <p>{value}</p>\r\n  </div>\r\n);\r\n\r\nexport default Insights;"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,WAAW;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAM,CAACiB,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAC,MAAM;IAC/C,MAAMmB,IAAI,GAAG,IAAIC,IAAI,CAAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}