{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\prana\\\\OneDrive\\\\Documents\\\\Material\\\\facebook\\\\facebook-insights-app\\\\src\\\\components\\\\Insights.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const Insights = ({ accessToken, pageId }) => {\n//   const [insights, setInsights] = useState(null);\n\n//   useEffect(() => {\n//     const fetchInsights = async () => {\n//       try {\n//         const response = await axios.get(\n//           `https://graph.facebook.com/v13.0/${pageId}/insights?metric=page_fans,page_engaged_users,page_impressions,page_reactions_total&access_token=${accessToken}`\n//         );\n//         setInsights(response.data.data);\n//       } catch (error) {\n//         console.error('Error fetching insights:', error);\n//       }\n//     };\n//     fetchInsights();\n//   }, [accessToken, pageId]);\n\n//   if (!insights) {\n//     return null;\n//   }\n\n//   return (\n//     <div>\n//       <h2>Page Insights:</h2>\n//       <div>\n//         <h3>Total Followers / Fans: {insights[0].values[0].value}</h3>\n//         <h3>Total Engagement: {insights[1].values[0].value}</h3>\n//         <h3>Total Impressions: {insights[2].values[0].value}</h3>\n//         <h3>Total Reactions: {insights[3].values[0].value}</h3>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Insights;\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Insights = ({\n  accessToken,\n  pageId\n}) => {\n  _s();\n  const [insights, setInsights] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchInsights = async () => {\n      setLoading(true);\n      try {\n        // Fetch page access token first\n        const pageTokenResponse = await axios.get(`https://graph.facebook.com/v16.0/${pageId}?fields=access_token&access_token=${accessToken}`);\n        const pageAccessToken = pageTokenResponse.data.access_token;\n\n        // Fetch each metric separately\n        //   const metrics = ['page_fan_adds_unique', 'page_views_total', 'page_post_engagements', 'page_fans'];\n        const metrics = ['page_fans', 'page_views_total', 'page_post_engagements', 'page_impressions'];\n        const insightsData = await Promise.all(metrics.map(async metric => {\n          try {\n            const response = await axios.get(`https://graph.facebook.com/v16.0/${pageId}/insights`, {\n              params: {\n                metric: metric,\n                access_token: pageAccessToken,\n                period: 'day',\n                date_preset: 'last_30d'\n              }\n            });\n            return response.data.data[0];\n          } catch (error) {\n            console.warn(`Failed to fetch ${metric}:`, error.response ? error.response.data : error);\n            return {\n              name: metric,\n              values: [{\n                value: 'N/A'\n              }]\n            };\n          }\n        }));\n        setInsights(insightsData.filter(insight => insight !== null));\n        setError(null);\n      } catch (error) {\n        console.error('Error fetching insights:', error.response ? JSON.stringify(error.response.data, null, 2) : error);\n        setError(`Failed to fetch insights: ${error.response ? error.response.data.error.message : error.message}`);\n        setInsights([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (pageId && accessToken) {\n      fetchInsights();\n    }\n  }, [accessToken, pageId]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading insights...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 16\n    }, this);\n  }\n\n  // const getInsightValue = (metricName) => {\n  //     const metric = insights.find(insight => insight && insight.name === metricName);\n  //     return metric && metric.values && metric.values[0] ? metric.values[0].value : 'N/A';\n  // };\n\n  const getInsightValue = metricName => {\n    const metric = insights.find(insight => insight && insight.name === metricName);\n    if (!metric) {\n      console.log(`Metric ${metricName} not found`);\n      return 'N/A';\n    }\n    if (!metric.values || metric.values.length === 0) {\n      console.log(`No values for metric ${metricName}`);\n      return 'N/A';\n    }\n    const value = metric.values[0].value;\n    if (value === null || value === undefined) {\n      console.log(`Null or undefined value for metric ${metricName}`);\n      return 'N/A';\n    }\n    // For 'page_fans', we usually just want the latest value\n    if (metricName === 'page_fans') {\n      return value;\n    }\n    // For other metrics, you might want to sum up values or handle differently\n    return Array.isArray(value) ? value.reduce((sum, v) => sum + v, 0) : value;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'space-around',\n      flexWrap: 'wrap'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      title: \"Total Page Likes\",\n      value: getInsightValue('page_fans')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      title: \"Total Page Views\",\n      value: getInsightValue('page_views_total')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      title: \"Post Engagements\",\n      value: getInsightValue('page_post_engagements')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      title: \"Total Page Fans\",\n      value: getInsightValue('page_fans')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 9\n  }, this);\n};\n_s(Insights, \"s5yBMWHmuGeuZdU7hHvRPTz38GE=\");\n_c = Insights;\nconst Card = ({\n  title,\n  value\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  style: {\n    border: '1px solid #ccc',\n    borderRadius: '5px',\n    padding: '10px',\n    margin: '10px',\n    minWidth: '200px'\n  },\n  children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n    children: title\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 9\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 144,\n  columnNumber: 5\n}, this);\n_c2 = Card;\nexport default Insights;\nvar _c, _c2;\n$RefreshReg$(_c, \"Insights\");\n$RefreshReg$(_c2, \"Card\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Insights","accessToken","pageId","_s","insights","setInsights","error","setError","loading","setLoading","fetchInsights","pageTokenResponse","get","pageAccessToken","data","access_token","metrics","insightsData","Promise","all","map","metric","response","params","period","date_preset","console","warn","name","values","value","filter","insight","JSON","stringify","message","children","fileName","_jsxFileName","lineNumber","columnNumber","getInsightValue","metricName","find","log","length","undefined","Array","isArray","reduce","sum","v","style","display","justifyContent","flexWrap","Card","title","_c","border","borderRadius","padding","margin","minWidth","_c2","$RefreshReg$"],"sources":["C:/Users/prana/OneDrive/Documents/Material/facebook/facebook-insights-app/src/components/Insights.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n\r\n// const Insights = ({ accessToken, pageId }) => {\r\n//   const [insights, setInsights] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     const fetchInsights = async () => {\r\n//       try {\r\n//         const response = await axios.get(\r\n//           `https://graph.facebook.com/v13.0/${pageId}/insights?metric=page_fans,page_engaged_users,page_impressions,page_reactions_total&access_token=${accessToken}`\r\n//         );\r\n//         setInsights(response.data.data);\r\n//       } catch (error) {\r\n//         console.error('Error fetching insights:', error);\r\n//       }\r\n//     };\r\n//     fetchInsights();\r\n//   }, [accessToken, pageId]);\r\n\r\n//   if (!insights) {\r\n//     return null;\r\n//   }\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>Page Insights:</h2>\r\n//       <div>\r\n//         <h3>Total Followers / Fans: {insights[0].values[0].value}</h3>\r\n//         <h3>Total Engagement: {insights[1].values[0].value}</h3>\r\n//         <h3>Total Impressions: {insights[2].values[0].value}</h3>\r\n//         <h3>Total Reactions: {insights[3].values[0].value}</h3>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Insights;\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Insights = ({ accessToken, pageId }) => {\r\n    const [insights, setInsights] = useState([]);\r\n    const [error, setError] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        const fetchInsights = async () => {\r\n            setLoading(true);\r\n            try {\r\n                // Fetch page access token first\r\n                const pageTokenResponse = await axios.get(\r\n                    `https://graph.facebook.com/v16.0/${pageId}?fields=access_token&access_token=${accessToken}`\r\n                );\r\n                const pageAccessToken = pageTokenResponse.data.access_token;\r\n\r\n                // Fetch each metric separately\r\n                //   const metrics = ['page_fan_adds_unique', 'page_views_total', 'page_post_engagements', 'page_fans'];\r\n                const metrics = ['page_fans', 'page_views_total', 'page_post_engagements', 'page_impressions'];\r\n                const insightsData = await Promise.all(metrics.map(async (metric) => {\r\n                    try {\r\n                        const response = await axios.get(\r\n                            `https://graph.facebook.com/v16.0/${pageId}/insights`,\r\n                            {\r\n                                params: {\r\n                                    metric: metric,\r\n                                    access_token: pageAccessToken,\r\n                                    period: 'day',\r\n                                    date_preset: 'last_30d'\r\n                                }\r\n                            }\r\n                        );\r\n                        return response.data.data[0];\r\n                    } catch (error) {\r\n                        console.warn(`Failed to fetch ${metric}:`, error.response ? error.response.data : error);\r\n                        return { name: metric, values: [{ value: 'N/A' }] };\r\n                    }\r\n                }));\r\n\r\n                setInsights(insightsData.filter(insight => insight !== null));\r\n                setError(null);\r\n            } catch (error) {\r\n                console.error('Error fetching insights:', error.response ? JSON.stringify(error.response.data, null, 2) : error);\r\n                setError(`Failed to fetch insights: ${error.response ? error.response.data.error.message : error.message}`);\r\n                setInsights([]);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        if (pageId && accessToken) {\r\n            fetchInsights();\r\n        }\r\n    }, [accessToken, pageId]);\r\n\r\n    if (loading) {\r\n        return <div>Loading insights...</div>;\r\n    }\r\n\r\n    if (error) {\r\n        return <div>{error}</div>;\r\n    }\r\n\r\n    // const getInsightValue = (metricName) => {\r\n    //     const metric = insights.find(insight => insight && insight.name === metricName);\r\n    //     return metric && metric.values && metric.values[0] ? metric.values[0].value : 'N/A';\r\n    // };\r\n\r\n    const getInsightValue = (metricName) => {\r\n        const metric = insights.find(insight => insight && insight.name === metricName);\r\n        if (!metric) {\r\n          console.log(`Metric ${metricName} not found`);\r\n          return 'N/A';\r\n        }\r\n        if (!metric.values || metric.values.length === 0) {\r\n          console.log(`No values for metric ${metricName}`);\r\n          return 'N/A';\r\n        }\r\n        const value = metric.values[0].value;\r\n        if (value === null || value === undefined) {\r\n          console.log(`Null or undefined value for metric ${metricName}`);\r\n          return 'N/A';\r\n        }\r\n        // For 'page_fans', we usually just want the latest value\r\n        if (metricName === 'page_fans') {\r\n          return value;\r\n        }\r\n        // For other metrics, you might want to sum up values or handle differently\r\n        return Array.isArray(value) ? value.reduce((sum, v) => sum + v, 0) : value;\r\n      };\r\n    return (\r\n        <div style={{ display: 'flex', justifyContent: 'space-around', flexWrap: 'wrap' }}>\r\n            {/* <Card title=\"New Page Likes\" value={getInsightValue('page_fan_adds_unique')} /> */}\r\n            <Card title=\"Total Page Likes\" value={getInsightValue('page_fans')} />\r\n            <Card title=\"Total Page Views\" value={getInsightValue('page_views_total')} />\r\n            <Card title=\"Post Engagements\" value={getInsightValue('page_post_engagements')} />\r\n            <Card title=\"Total Page Fans\" value={getInsightValue('page_fans')} />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Card = ({ title, value }) => (\r\n    <div style={{ border: '1px solid #ccc', borderRadius: '5px', padding: '10px', margin: '10px', minWidth: '200px' }}>\r\n        <h3>{title}</h3>\r\n        <p>{value}</p>\r\n    </div>\r\n);\r\n\r\nexport default Insights;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}