{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\prana\\\\OneDrive\\\\Documents\\\\Material\\\\facebook\\\\facebook-insights-app\\\\src\\\\components\\\\Insights.js\",\n  _s = $RefreshSig$();\n// MAIN\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const Insights = ({ accessToken, pageId }) => {\n//     const [insights, setInsights] = useState([]);\n//     const [error, setError] = useState(null);\n//     const [loading, setLoading] = useState(true);\n//     const [fancount, setFancount] = useState(\"\");\n\n//     useEffect(() => {\n//         const fetchInsights = async () => {\n//             setLoading(true);\n//             try {\n//                 // Fetch page access token first\n//                 const pageTokenResponse = await axios.get(\n//                     `https://graph.facebook.com/v16.0/${pageId}?fields=access_token&access_token=${accessToken}`\n//                 );\n//                 const pageAccessToken = pageTokenResponse.data.access_token;\n\n//                 // Fetch each metric separately\n//                 //   const metrics = ['page_fan_adds_unique', 'page_views_total', 'page_post_engagements', 'page_fans'];\n//                 const metrics = ['page_fans', 'page_views_total', 'page_post_engagements', 'page_impressions'];\n//                 const insightsData = await Promise.all(metrics.map(async (metric) => {\n//                     try {\n//                         // const response = await axios.get(\n//                         //     `https://graph.facebook.com/v16.0/${pageId}/insights`,\n//                         //     {\n//                         //         params: {\n//                         //             metric: metric,\n//                         //             access_token: pageAccessToken,\n//                         //             period: 'day',\n//                         //             date_preset: 'last_30d'\n//                         //         }\n//                         //     }\n//                         // );\n//                         const response = await axios.get(\n//                             `https://graph.facebook.com/v16.0/${pageId}/insights`,\n//                             {\n//                               params: {\n//                                 metric: metric,\n//                                 access_token: pageAccessToken,\n//                                 period: 'day',\n//                                 date_preset: 'today'  // We only need the current value for page_fans\n//                               }\n//                             }\n//                           );\n//                         return response.data.data[0];\n//                     } catch (error) {\n//                         console.warn(`Failed to fetch ${metric}:`, error.response ? error.response.data : error);\n//                         return { name: metric, values: [{ value: 'N/A' }] };\n//                     }\n\n//                 }));\n\n//                 setInsights(insightsData.filter(insight => insight !== null));\n//                 setError(null);\n//             } catch (error) {\n//                 console.error('Error fetching insights:', error.response ? JSON.stringify(error.response.data, null, 2) : error);\n//                 setError(`Failed to fetch insights: ${error.response ? error.response.data.error.message : error.message}`);\n//                 setInsights([]);\n//             } finally {\n//                 setLoading(false);\n//             }\n//         };\n//         const fetchPageFans = async () => {\n//             try {\n//               const response = await axios.get(\n//                 `https://graph.facebook.com/v16.0/${pageId}`,\n//                 {\n//                   params: {\n//                     fields: 'fan_count',\n//                     access_token: accessToken\n//                   }\n//                 }\n//               );\n//               console.log('Page fans:', response.data.fan_count);\n//               setFancount( response.data.fan_count)\n//             } catch (error) {\n//               console.error('Error fetching page fans:', error);\n//               return 'N/A';\n//             }\n//           };\n\n//         if (pageId && accessToken) {\n//             fetchInsights();\n//             fetchPageFans()\n//         }\n//     }, [accessToken, pageId]);\n\n//     if (loading) {\n//         return <div>Loading insights...</div>;\n//     }\n\n//     if (error) {\n//         return <div>{error}</div>;\n//     }\n\n//     // const getInsightValue = (metricName) => {\n//     //     const metric = insights.find(insight => insight && insight.name === metricName);\n//     //     return metric && metric.values && metric.values[0] ? metric.values[0].value : 'N/A';\n//     // };\n\n//     const getInsightValue = (metricName) => {\n//         const metric = insights.find(insight => insight && insight.name === metricName);\n//         if (!metric) {\n//           console.log(`Metric ${metricName} not found`);\n//           return 'N/A';\n//         }\n//         if (!metric.values || metric.values.length === 0) {\n//           console.log(`No values for metric ${metricName}`);\n//           return 'N/A';\n//         }\n//         const value = metric.values[0].value;\n//         if (value === null || value === undefined) {\n//           console.log(`Null or undefined value for metric ${metricName}`);\n//           return 'N/A';\n//         }\n//         // For 'page_fans', we usually just want the latest value\n//         if (metricName === 'page_fans') {\n//           return value;\n//         }\n//         // For other metrics, you might want to sum up values or handle differently\n//         return Array.isArray(value) ? value.reduce((sum, v) => sum + v, 0) : value;\n//       };\n\n//     return (\n//         <div style={{ display: 'flex', justifyContent: 'space-around', flexWrap: 'wrap' }}>\n//             {/* <Card title=\"New Page Likes\" value={getInsightValue('page_fan_adds_unique')} /> */}\n//             <Card title=\"Total Page Likes\" value={getInsightValue('page_fans')} />\n//             <Card title=\"Total Page Views\" value={getInsightValue('page_views_total')} />\n//             <Card title=\"Post Engagements\" value={getInsightValue('page_post_engagements')} />\n//             <Card title=\"Total Page Fans\" value={getInsightValue('page_fans')} />\n//         </div>\n//     );\n// };\n\n// const Card = ({ title, value }) => (\n//     <div style={{ border: '1px solid #ccc', borderRadius: '5px', padding: '10px', margin: '10px', minWidth: '200px' }}>\n//         <h3>{title}</h3>\n//         <p>{value}</p>\n//     </div>\n// );\n\n// export default Insights;\n\n// *************************************************************************************************************************\n\n// CLAUDE\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const Insights = ({ accessToken, pageId }) => {\n//   const [insights, setInsights] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [fancount, setFancount] = useState(\"\");\n\n//   const [startDate, setStartDate] = useState(() => {\n//     const date = new Date();\n//     date.setDate(date.getDate() - 30); // 30 days ago\n//     return date.toISOString().split('T')[0];\n//   });\n\n//   const [endDate, setEndDate] = useState(() => {\n//     const date = new Date();\n//     return date.toISOString().split('T')[0];\n//   });\n\n//   const handleStartDateChange = (event) => {\n//     setStartDate(event.target.value);\n//     console.log(\"New start date:\", event.target.value);\n//   };\n\n//   const handleEndDateChange = (event) => {\n//     setEndDate(event.target.value);\n//     console.log(\"New end date:\", event.target.value);\n//   };\n\n//   const formatDate = (date) => {\n//     if (!date) return null;\n//     const d = new Date(date);\n//     return `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, '0')}-${String(d.getDate()).padStart(2, '0')}`;\n//   };\n\n//   const fetchCurrentFanCount = async () => {\n//     try {\n//       const response = await axios.get(\n//         `https://graph.facebook.com/v16.0/${pageId}`,\n//         {\n//           params: {\n//             fields: 'fan_count',\n//             access_token: accessToken\n//           }\n//         }\n//       );\n//       console.log('Current fan count:', response.data.fan_count);\n//       return response.data.fan_count;\n//     } catch (error) {\n//       console.error('Error fetching current fan count:', error);\n//       return 'N/A';\n//     }\n//   };\n\n//   useEffect(() => {\n//     const fetchInsights = async () => {\n//       setLoading(true);\n//       try {\n//         // Fetch page access token first\n//         const pageTokenResponse = await axios.get(\n//           `https://graph.facebook.com/v16.0/${pageId}?fields=access_token&access_token=${accessToken}`\n//         );\n//         const pageAccessToken = pageTokenResponse.data.access_token;\n\n//         // Fetch each metric separately\n//         // const metrics = ['page_fans', 'page_post_engagements', 'page_impressions', 'page_reactions_total'];\n//         const metrics = ['page_fans', 'page_post_engagements', 'page_impressions', 'page_actions_post_reactions_total'];\n//         const insightsData = await Promise.all(metrics.map(async (metric) => {\n//           try {\n//             const response = await axios.get(\n//               `https://graph.facebook.com/v16.0/${pageId}/insights`,\n//               {\n//                 params: {\n//                   metric: metric,\n//                   access_token: pageAccessToken,\n//                   period: 'total_over_range',\n//                   since: formatDate(startDate) || formatDate(new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)),\n//                   until: formatDate(endDate) || formatDate(new Date())\n//                 }\n//               }\n//             );\n//             console.log(`Raw data for ${metric}:`, response.data);\n//             return response.data.data[0];\n//           } catch (error) {\n//             console.warn(`Failed to fetch ${metric}:`, error.response ? error.response.data : error);\n//             return { name: metric, values: [{ value: 'N/A' }] };\n//           }\n//         }));\n\n//         setInsights(insightsData.filter(insight => insight !== null));\n//         console.log(\"Updated insights:\", insightsData.filter(insight => insight !== null));\n//         setError(null);\n//       } catch (error) {\n//         console.error('Error fetching insights:', error.response ? JSON.stringify(error.response.data, null, 2) : error);\n//         setError(`Failed to fetch insights: ${error.response ? error.response.data.error.message : error.message}`);\n//         setInsights([]);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n//     const fetchPageFans = async () => {\n//       try {\n//         const response = await axios.get(\n//           `https://graph.facebook.com/v16.0/${pageId}`,\n//           {\n//             params: {\n//               fields: 'fan_count',\n//               access_token: accessToken\n//             }\n//           }\n//         );\n//         console.log('Page fans:', response.data.fan_count);\n//         setFancount(response.data.fan_count)\n//       } catch (error) {\n//         console.error('Error fetching page fans:', error);\n//         return 'N/A';\n//       }\n//     };\n\n//     console.log(\"Effect triggered. PageId:\", pageId, \"AccessToken:\", !!accessToken, \"StartDate:\", startDate, \"EndDate:\", endDate);\n//     if (pageId && accessToken) {\n//       fetchInsights();\n//       fetchCurrentFanCount().then(count => setFancount(count));\n//     }\n//   }, [accessToken, pageId, startDate, endDate]);\n\n//   if (loading) {\n//     return <div>Loading insights...</div>;\n//   }\n\n//   if (error) {\n//     return <div>{error}</div>;\n//   }\n\n//   // const getInsightValue = (metricName) => {\n//   //     const metric = insights.find(insight => insight && insight.name === metricName);\n//   //     return metric && metric.values && metric.values[0] ? metric.values[0].value : 'N/A';\n//   // };\n\n//   const getInsightValue = (metricName) => {\n//     const metric = insights.find(insight => insight && insight.name === metricName);\n//     if (!metric) {\n//       console.log(`Metric ${metricName} not found`);\n//       return 'N/A';\n//     }\n//     if (!metric.values || metric.values.length === 0) {\n//       console.log(`No values for metric ${metricName}`);\n//       return 'N/A';\n//     }\n\n//     if (metricName === 'page_fans') {\n//       // For page_fans, we want the most recent value\n//       const lastValue = metric.values[metric.values.length - 1].value;\n//       return typeof lastValue === 'object' ? JSON.stringify(lastValue) : String(lastValue);\n//     }\n\n//     if (metricName === 'page_actions_post_reactions_total') {\n//       // For reactions, we need to sum up all types of reactions\n//       const lastValue = metric.values[metric.values.length - 1].value;\n//       if (typeof lastValue === 'object') {\n//         return Object.values(lastValue).reduce((sum, val) => sum + val, 0).toString();\n//       }\n//       return String(lastValue);\n//     }\n\n//     // For other metrics, sum up all values\n//     const totalValue = metric.values.reduce((sum, item) => {\n//       const itemValue = typeof item.value === 'object' ? Object.values(item.value).reduce((s, v) => s + v, 0) : item.value;\n//       return sum + (itemValue || 0);\n//     }, 0);\n//     return String(totalValue);\n//   };\n\n//   return (\n//     <div style={{ display: 'flex', justifyContent: 'space-around', flexWrap: 'wrap' }}>\n//       <div>\n//         <label>\n//           Start Date:\n//           <input type=\"date\" value={startDate} onChange={handleStartDateChange} />\n//         </label>\n//         <label>\n//           End Date:\n//           <input type=\"date\" value={endDate} onChange={handleEndDateChange} />\n//         </label>\n//       </div>\n//       <Card title=\"Total Followers / Fans\" value={fancount} />\n//       <Card title=\"Total Engagement\" value={getInsightValue('page_post_engagements') || 'N/A'} />\n//       <Card title=\"Total Impressions\" value={getInsightValue('page_impressions') || 'N/A'} />\n//       <Card title=\"Total Reactions\" value={getInsightValue('page_actions_post_reactions_total') || 'N/A'} />\n//     </div>\n//   );\n// };\n\n// const Card = ({ title, value }) => (\n//   <div style={{ border: '1px solid #ccc', borderRadius: '5px', padding: '10px', margin: '10px', minWidth: '200px' }}>\n//     <h3>{title}</h3>\n//     <p>{typeof value === 'object' ? JSON.stringify(value) : value}</p>\n//   </div>\n// );\n\n// export default Insights;\n\n// ******************************************************************************************\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Insights = ({\n  accessToken,\n  pageId\n}) => {\n  _s();\n  const [insights, setInsights] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [fanCount, setFanCount] = useState(\"\");\n  useEffect(() => {\n    const fetchInsights = async () => {\n      setLoading(true);\n      try {\n        // Fetch page access token first\n        const pageTokenResponse = await axios.get(`https://graph.facebook.com/v16.0/${pageId}?fields=access_token&access_token=${accessToken}`);\n        const pageAccessToken = pageTokenResponse.data.access_token;\n\n        // Construct insights API requests\n        const metrics = ['page_fans', 'page_views_total', 'page_post_engagements', 'page_impressions'];\n        const insightsData = await Promise.all(metrics.map(async metric => {\n          try {\n            let sinceDate = new Date();\n            let untilDate = new Date();\n            sinceDate.setDate(sinceDate.getDate() - 30); // Example: Fetch data from last 30 days\n            untilDate.setDate(untilDate.getDate() - 1); // Until yesterday\n            console.log(\"PageID\", pageId);\n            const response = await axios.get(`https://graph.facebook.com/v16.0/${pageId}/insights`, {\n              params: {\n                metric: metric,\n                access_token: pageAccessToken,\n                period: 'day',\n                since: sinceDate.toISOString(),\n                // Format dates to ISO string\n                until: untilDate.toISOString()\n              }\n            });\n            return response.data.data[0];\n          } catch (error) {\n            console.warn(`Failed to fetch ${metric}:`, error.response ? error.response.data : error);\n            return {\n              name: metric,\n              values: [{\n                value: 'N/A'\n              }]\n            };\n          }\n        }));\n        setInsights(insightsData.filter(insight => insight !== null));\n        setError(null);\n      } catch (error) {\n        console.error('Error fetching insights:', error.response ? JSON.stringify(error.response.data, null, 2) : error);\n        setError(`Failed to fetch insights: ${error.response ? error.response.data.error.message : error.message}`);\n        setInsights([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    const fetchPageFans = async () => {\n      try {\n        const response = await axios.get(`https://graph.facebook.com/v16.0/${pageId}`, {\n          params: {\n            fields: 'fan_count',\n            access_token: accessToken\n          }\n        });\n        setFanCount(response.data.fan_count);\n      } catch (error) {\n        console.error('Error fetching page fans:', error);\n        setFanCount('N/A');\n      }\n    };\n    if (pageId && accessToken) {\n      fetchInsights();\n      fetchPageFans();\n    }\n  }, [accessToken, pageId]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading insights...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 16\n    }, this);\n  }\n  const getInsightValue = metricName => {\n    const metric = insights.find(insight => insight && insight.name === metricName);\n    if (!metric) {\n      console.log(`Metric ${metricName} not found`);\n      return 'N/A';\n    }\n    if (!metric.values || metric.values.length === 0) {\n      console.log(`No values for metric ${metricName}`);\n      return 'N/A';\n    }\n    const value = metric.values[0].value;\n    if (value === null || value === undefined) {\n      console.log(`Null or undefined value for metric ${metricName}`);\n      return 'N/A';\n    }\n    // For 'page_fans', we usually just want the latest value\n    if (metricName === 'page_fans') {\n      return value;\n    }\n    // For other metrics, you might want to sum up values or handle differently\n    return Array.isArray(value) ? value.reduce((sum, v) => sum + v, 0) : value;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'space-around',\n      flexWrap: 'wrap'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      title: \"Total Page Likes\",\n      value: getInsightValue('page_fans')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      title: \"Total Page Views\",\n      value: getInsightValue('page_views_total')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 473,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      title: \"Post Engagements\",\n      value: getInsightValue('page_post_engagements')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 474,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      title: \"Total Impressions\",\n      value: getInsightValue('page_impressions')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 475,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 471,\n    columnNumber: 9\n  }, this);\n};\n_s(Insights, \"fQPd/DNry5aI8fDigWRnSaULnMU=\");\n_c = Insights;\nconst Card = ({\n  title,\n  value\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  style: {\n    border: '1px solid #ccc',\n    borderRadius: '5px',\n    padding: '10px',\n    margin: '10px',\n    minWidth: '200px'\n  },\n  children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n    children: title\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 482,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 483,\n    columnNumber: 9\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 481,\n  columnNumber: 5\n}, this);\n_c2 = Card;\nexport default Insights;\nvar _c, _c2;\n$RefreshReg$(_c, \"Insights\");\n$RefreshReg$(_c2, \"Card\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Insights","accessToken","pageId","_s","insights","setInsights","error","setError","loading","setLoading","fanCount","setFanCount","fetchInsights","pageTokenResponse","get","pageAccessToken","data","access_token","metrics","insightsData","Promise","all","map","metric","sinceDate","Date","untilDate","setDate","getDate","console","log","response","params","period","since","toISOString","until","warn","name","values","value","filter","insight","JSON","stringify","message","fetchPageFans","fields","fan_count","children","fileName","_jsxFileName","lineNumber","columnNumber","getInsightValue","metricName","find","length","undefined","Array","isArray","reduce","sum","v","style","display","justifyContent","flexWrap","Card","title","_c","border","borderRadius","padding","margin","minWidth","_c2","$RefreshReg$"],"sources":["C:/Users/prana/OneDrive/Documents/Material/facebook/facebook-insights-app/src/components/Insights.js"],"sourcesContent":["// MAIN\r\n// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n\r\n// const Insights = ({ accessToken, pageId }) => {\r\n//     const [insights, setInsights] = useState([]);\r\n//     const [error, setError] = useState(null);\r\n//     const [loading, setLoading] = useState(true);\r\n//     const [fancount, setFancount] = useState(\"\");\r\n\r\n//     useEffect(() => {\r\n//         const fetchInsights = async () => {\r\n//             setLoading(true);\r\n//             try {\r\n//                 // Fetch page access token first\r\n//                 const pageTokenResponse = await axios.get(\r\n//                     `https://graph.facebook.com/v16.0/${pageId}?fields=access_token&access_token=${accessToken}`\r\n//                 );\r\n//                 const pageAccessToken = pageTokenResponse.data.access_token;\r\n\r\n//                 // Fetch each metric separately\r\n//                 //   const metrics = ['page_fan_adds_unique', 'page_views_total', 'page_post_engagements', 'page_fans'];\r\n//                 const metrics = ['page_fans', 'page_views_total', 'page_post_engagements', 'page_impressions'];\r\n//                 const insightsData = await Promise.all(metrics.map(async (metric) => {\r\n//                     try {\r\n//                         // const response = await axios.get(\r\n//                         //     `https://graph.facebook.com/v16.0/${pageId}/insights`,\r\n//                         //     {\r\n//                         //         params: {\r\n//                         //             metric: metric,\r\n//                         //             access_token: pageAccessToken,\r\n//                         //             period: 'day',\r\n//                         //             date_preset: 'last_30d'\r\n//                         //         }\r\n//                         //     }\r\n//                         // );\r\n//                         const response = await axios.get(\r\n//                             `https://graph.facebook.com/v16.0/${pageId}/insights`,\r\n//                             {\r\n//                               params: {\r\n//                                 metric: metric,\r\n//                                 access_token: pageAccessToken,\r\n//                                 period: 'day',\r\n//                                 date_preset: 'today'  // We only need the current value for page_fans\r\n//                               }\r\n//                             }\r\n//                           );\r\n//                         return response.data.data[0];\r\n//                     } catch (error) {\r\n//                         console.warn(`Failed to fetch ${metric}:`, error.response ? error.response.data : error);\r\n//                         return { name: metric, values: [{ value: 'N/A' }] };\r\n//                     }\r\n\r\n//                 }));\r\n\r\n//                 setInsights(insightsData.filter(insight => insight !== null));\r\n//                 setError(null);\r\n//             } catch (error) {\r\n//                 console.error('Error fetching insights:', error.response ? JSON.stringify(error.response.data, null, 2) : error);\r\n//                 setError(`Failed to fetch insights: ${error.response ? error.response.data.error.message : error.message}`);\r\n//                 setInsights([]);\r\n//             } finally {\r\n//                 setLoading(false);\r\n//             }\r\n//         };\r\n//         const fetchPageFans = async () => {\r\n//             try {\r\n//               const response = await axios.get(\r\n//                 `https://graph.facebook.com/v16.0/${pageId}`,\r\n//                 {\r\n//                   params: {\r\n//                     fields: 'fan_count',\r\n//                     access_token: accessToken\r\n//                   }\r\n//                 }\r\n//               );\r\n//               console.log('Page fans:', response.data.fan_count);\r\n//               setFancount( response.data.fan_count)\r\n//             } catch (error) {\r\n//               console.error('Error fetching page fans:', error);\r\n//               return 'N/A';\r\n//             }\r\n//           };\r\n\r\n//         if (pageId && accessToken) {\r\n//             fetchInsights();\r\n//             fetchPageFans()\r\n//         }\r\n//     }, [accessToken, pageId]);\r\n\r\n//     if (loading) {\r\n//         return <div>Loading insights...</div>;\r\n//     }\r\n\r\n//     if (error) {\r\n//         return <div>{error}</div>;\r\n//     }\r\n\r\n//     // const getInsightValue = (metricName) => {\r\n//     //     const metric = insights.find(insight => insight && insight.name === metricName);\r\n//     //     return metric && metric.values && metric.values[0] ? metric.values[0].value : 'N/A';\r\n//     // };\r\n\r\n//     const getInsightValue = (metricName) => {\r\n//         const metric = insights.find(insight => insight && insight.name === metricName);\r\n//         if (!metric) {\r\n//           console.log(`Metric ${metricName} not found`);\r\n//           return 'N/A';\r\n//         }\r\n//         if (!metric.values || metric.values.length === 0) {\r\n//           console.log(`No values for metric ${metricName}`);\r\n//           return 'N/A';\r\n//         }\r\n//         const value = metric.values[0].value;\r\n//         if (value === null || value === undefined) {\r\n//           console.log(`Null or undefined value for metric ${metricName}`);\r\n//           return 'N/A';\r\n//         }\r\n//         // For 'page_fans', we usually just want the latest value\r\n//         if (metricName === 'page_fans') {\r\n//           return value;\r\n//         }\r\n//         // For other metrics, you might want to sum up values or handle differently\r\n//         return Array.isArray(value) ? value.reduce((sum, v) => sum + v, 0) : value;\r\n//       };\r\n\r\n//     return (\r\n//         <div style={{ display: 'flex', justifyContent: 'space-around', flexWrap: 'wrap' }}>\r\n//             {/* <Card title=\"New Page Likes\" value={getInsightValue('page_fan_adds_unique')} /> */}\r\n//             <Card title=\"Total Page Likes\" value={getInsightValue('page_fans')} />\r\n//             <Card title=\"Total Page Views\" value={getInsightValue('page_views_total')} />\r\n//             <Card title=\"Post Engagements\" value={getInsightValue('page_post_engagements')} />\r\n//             <Card title=\"Total Page Fans\" value={getInsightValue('page_fans')} />\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// const Card = ({ title, value }) => (\r\n//     <div style={{ border: '1px solid #ccc', borderRadius: '5px', padding: '10px', margin: '10px', minWidth: '200px' }}>\r\n//         <h3>{title}</h3>\r\n//         <p>{value}</p>\r\n//     </div>\r\n// );\r\n\r\n// export default Insights;\r\n\r\n// *************************************************************************************************************************\r\n\r\n// CLAUDE\r\n// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n\r\n// const Insights = ({ accessToken, pageId }) => {\r\n//   const [insights, setInsights] = useState([]);\r\n//   const [error, setError] = useState(null);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [fancount, setFancount] = useState(\"\");\r\n\r\n//   const [startDate, setStartDate] = useState(() => {\r\n//     const date = new Date();\r\n//     date.setDate(date.getDate() - 30); // 30 days ago\r\n//     return date.toISOString().split('T')[0];\r\n//   });\r\n\r\n//   const [endDate, setEndDate] = useState(() => {\r\n//     const date = new Date();\r\n//     return date.toISOString().split('T')[0];\r\n//   });\r\n\r\n//   const handleStartDateChange = (event) => {\r\n//     setStartDate(event.target.value);\r\n//     console.log(\"New start date:\", event.target.value);\r\n//   };\r\n\r\n//   const handleEndDateChange = (event) => {\r\n//     setEndDate(event.target.value);\r\n//     console.log(\"New end date:\", event.target.value);\r\n//   };\r\n\r\n//   const formatDate = (date) => {\r\n//     if (!date) return null;\r\n//     const d = new Date(date);\r\n//     return `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, '0')}-${String(d.getDate()).padStart(2, '0')}`;\r\n//   };\r\n\r\n//   const fetchCurrentFanCount = async () => {\r\n//     try {\r\n//       const response = await axios.get(\r\n//         `https://graph.facebook.com/v16.0/${pageId}`,\r\n//         {\r\n//           params: {\r\n//             fields: 'fan_count',\r\n//             access_token: accessToken\r\n//           }\r\n//         }\r\n//       );\r\n//       console.log('Current fan count:', response.data.fan_count);\r\n//       return response.data.fan_count;\r\n//     } catch (error) {\r\n//       console.error('Error fetching current fan count:', error);\r\n//       return 'N/A';\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     const fetchInsights = async () => {\r\n//       setLoading(true);\r\n//       try {\r\n//         // Fetch page access token first\r\n//         const pageTokenResponse = await axios.get(\r\n//           `https://graph.facebook.com/v16.0/${pageId}?fields=access_token&access_token=${accessToken}`\r\n//         );\r\n//         const pageAccessToken = pageTokenResponse.data.access_token;\r\n\r\n//         // Fetch each metric separately\r\n//         // const metrics = ['page_fans', 'page_post_engagements', 'page_impressions', 'page_reactions_total'];\r\n//         const metrics = ['page_fans', 'page_post_engagements', 'page_impressions', 'page_actions_post_reactions_total'];\r\n//         const insightsData = await Promise.all(metrics.map(async (metric) => {\r\n//           try {\r\n//             const response = await axios.get(\r\n//               `https://graph.facebook.com/v16.0/${pageId}/insights`,\r\n//               {\r\n//                 params: {\r\n//                   metric: metric,\r\n//                   access_token: pageAccessToken,\r\n//                   period: 'total_over_range',\r\n//                   since: formatDate(startDate) || formatDate(new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)),\r\n//                   until: formatDate(endDate) || formatDate(new Date())\r\n//                 }\r\n//               }\r\n//             );\r\n//             console.log(`Raw data for ${metric}:`, response.data);\r\n//             return response.data.data[0];\r\n//           } catch (error) {\r\n//             console.warn(`Failed to fetch ${metric}:`, error.response ? error.response.data : error);\r\n//             return { name: metric, values: [{ value: 'N/A' }] };\r\n//           }\r\n//         }));\r\n\r\n//         setInsights(insightsData.filter(insight => insight !== null));\r\n//         console.log(\"Updated insights:\", insightsData.filter(insight => insight !== null));\r\n//         setError(null);\r\n//       } catch (error) {\r\n//         console.error('Error fetching insights:', error.response ? JSON.stringify(error.response.data, null, 2) : error);\r\n//         setError(`Failed to fetch insights: ${error.response ? error.response.data.error.message : error.message}`);\r\n//         setInsights([]);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n//     const fetchPageFans = async () => {\r\n//       try {\r\n//         const response = await axios.get(\r\n//           `https://graph.facebook.com/v16.0/${pageId}`,\r\n//           {\r\n//             params: {\r\n//               fields: 'fan_count',\r\n//               access_token: accessToken\r\n//             }\r\n//           }\r\n//         );\r\n//         console.log('Page fans:', response.data.fan_count);\r\n//         setFancount(response.data.fan_count)\r\n//       } catch (error) {\r\n//         console.error('Error fetching page fans:', error);\r\n//         return 'N/A';\r\n//       }\r\n//     };\r\n\r\n//     console.log(\"Effect triggered. PageId:\", pageId, \"AccessToken:\", !!accessToken, \"StartDate:\", startDate, \"EndDate:\", endDate);\r\n//     if (pageId && accessToken) {\r\n//       fetchInsights();\r\n//       fetchCurrentFanCount().then(count => setFancount(count));\r\n//     }\r\n//   }, [accessToken, pageId, startDate, endDate]);\r\n\r\n//   if (loading) {\r\n//     return <div>Loading insights...</div>;\r\n//   }\r\n\r\n//   if (error) {\r\n//     return <div>{error}</div>;\r\n//   }\r\n\r\n//   // const getInsightValue = (metricName) => {\r\n//   //     const metric = insights.find(insight => insight && insight.name === metricName);\r\n//   //     return metric && metric.values && metric.values[0] ? metric.values[0].value : 'N/A';\r\n//   // };\r\n\r\n//   const getInsightValue = (metricName) => {\r\n//     const metric = insights.find(insight => insight && insight.name === metricName);\r\n//     if (!metric) {\r\n//       console.log(`Metric ${metricName} not found`);\r\n//       return 'N/A';\r\n//     }\r\n//     if (!metric.values || metric.values.length === 0) {\r\n//       console.log(`No values for metric ${metricName}`);\r\n//       return 'N/A';\r\n//     }\r\n    \r\n//     if (metricName === 'page_fans') {\r\n//       // For page_fans, we want the most recent value\r\n//       const lastValue = metric.values[metric.values.length - 1].value;\r\n//       return typeof lastValue === 'object' ? JSON.stringify(lastValue) : String(lastValue);\r\n//     }\r\n    \r\n//     if (metricName === 'page_actions_post_reactions_total') {\r\n//       // For reactions, we need to sum up all types of reactions\r\n//       const lastValue = metric.values[metric.values.length - 1].value;\r\n//       if (typeof lastValue === 'object') {\r\n//         return Object.values(lastValue).reduce((sum, val) => sum + val, 0).toString();\r\n//       }\r\n//       return String(lastValue);\r\n//     }\r\n    \r\n//     // For other metrics, sum up all values\r\n//     const totalValue = metric.values.reduce((sum, item) => {\r\n//       const itemValue = typeof item.value === 'object' ? Object.values(item.value).reduce((s, v) => s + v, 0) : item.value;\r\n//       return sum + (itemValue || 0);\r\n//     }, 0);\r\n//     return String(totalValue);\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ display: 'flex', justifyContent: 'space-around', flexWrap: 'wrap' }}>\r\n//       <div>\r\n//         <label>\r\n//           Start Date:\r\n//           <input type=\"date\" value={startDate} onChange={handleStartDateChange} />\r\n//         </label>\r\n//         <label>\r\n//           End Date:\r\n//           <input type=\"date\" value={endDate} onChange={handleEndDateChange} />\r\n//         </label>\r\n//       </div>\r\n//       <Card title=\"Total Followers / Fans\" value={fancount} />\r\n//       <Card title=\"Total Engagement\" value={getInsightValue('page_post_engagements') || 'N/A'} />\r\n//       <Card title=\"Total Impressions\" value={getInsightValue('page_impressions') || 'N/A'} />\r\n//       <Card title=\"Total Reactions\" value={getInsightValue('page_actions_post_reactions_total') || 'N/A'} />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const Card = ({ title, value }) => (\r\n//   <div style={{ border: '1px solid #ccc', borderRadius: '5px', padding: '10px', margin: '10px', minWidth: '200px' }}>\r\n//     <h3>{title}</h3>\r\n//     <p>{typeof value === 'object' ? JSON.stringify(value) : value}</p>\r\n//   </div>\r\n// );\r\n\r\n// export default Insights;\r\n\r\n// ******************************************************************************************\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Insights = ({ accessToken, pageId }) => {\r\n    const [insights, setInsights] = useState([]);\r\n    const [error, setError] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [fanCount, setFanCount] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        const fetchInsights = async () => {\r\n            setLoading(true);\r\n            try {\r\n                // Fetch page access token first\r\n                const pageTokenResponse = await axios.get(\r\n                    `https://graph.facebook.com/v16.0/${pageId}?fields=access_token&access_token=${accessToken}`\r\n                );\r\n                const pageAccessToken = pageTokenResponse.data.access_token;\r\n\r\n                // Construct insights API requests\r\n                const metrics = ['page_fans', 'page_views_total', 'page_post_engagements', 'page_impressions'];\r\n                const insightsData = await Promise.all(metrics.map(async (metric) => {\r\n                    try {\r\n                        let sinceDate = new Date();\r\n                        let untilDate = new Date();\r\n                        sinceDate.setDate(sinceDate.getDate() - 30); // Example: Fetch data from last 30 days\r\n                        untilDate.setDate(untilDate.getDate() - 1);   // Until yesterday\r\n                        console.log(\"PageID\",pageId)\r\n\r\n                        const response = await axios.get(\r\n                            `https://graph.facebook.com/v16.0/${pageId}/insights`,\r\n                            {\r\n                                params: {\r\n                                    metric: metric,\r\n                                    access_token: pageAccessToken,\r\n                                    period: 'day',\r\n                                    since: sinceDate.toISOString(), // Format dates to ISO string\r\n                                    until: untilDate.toISOString()\r\n                                }\r\n                            }\r\n                        );\r\n                        return response.data.data[0];\r\n                    } catch (error) {\r\n                        console.warn(`Failed to fetch ${metric}:`, error.response ? error.response.data : error);\r\n                        return { name: metric, values: [{ value: 'N/A' }] };\r\n                    }\r\n\r\n                }));\r\n\r\n                setInsights(insightsData.filter(insight => insight !== null));\r\n                setError(null);\r\n            } catch (error) {\r\n                console.error('Error fetching insights:', error.response ? JSON.stringify(error.response.data, null, 2) : error);\r\n                setError(`Failed to fetch insights: ${error.response ? error.response.data.error.message : error.message}`);\r\n                setInsights([]);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        const fetchPageFans = async () => {\r\n            try {\r\n                const response = await axios.get(\r\n                    `https://graph.facebook.com/v16.0/${pageId}`,\r\n                    {\r\n                        params: {\r\n                            fields: 'fan_count',\r\n                            access_token: accessToken\r\n                        }\r\n                    }\r\n                );\r\n                setFanCount(response.data.fan_count);\r\n            } catch (error) {\r\n                console.error('Error fetching page fans:', error);\r\n                setFanCount('N/A');\r\n            }\r\n        };\r\n\r\n        if (pageId && accessToken) {\r\n            fetchInsights();\r\n            fetchPageFans();\r\n        }\r\n    }, [accessToken, pageId]);\r\n\r\n    if (loading) {\r\n        return <div>Loading insights...</div>;\r\n    }\r\n\r\n    if (error) {\r\n        return <div>{error}</div>;\r\n    }\r\n\r\n    const getInsightValue = (metricName) => {\r\n        const metric = insights.find(insight => insight && insight.name === metricName);\r\n        if (!metric) {\r\n            console.log(`Metric ${metricName} not found`);\r\n            return 'N/A';\r\n        }\r\n        if (!metric.values || metric.values.length === 0) {\r\n            console.log(`No values for metric ${metricName}`);\r\n            return 'N/A';\r\n        }\r\n        const value = metric.values[0].value;\r\n        if (value === null || value === undefined) {\r\n            console.log(`Null or undefined value for metric ${metricName}`);\r\n            return 'N/A';\r\n        }\r\n        // For 'page_fans', we usually just want the latest value\r\n        if (metricName === 'page_fans') {\r\n            return value;\r\n        }\r\n        // For other metrics, you might want to sum up values or handle differently\r\n        return Array.isArray(value) ? value.reduce((sum, v) => sum + v, 0) : value;\r\n    };\r\n\r\n    return (\r\n        <div style={{ display: 'flex', justifyContent: 'space-around', flexWrap: 'wrap' }}>\r\n            <Card title=\"Total Page Likes\" value={getInsightValue('page_fans')} />\r\n            <Card title=\"Total Page Views\" value={getInsightValue('page_views_total')} />\r\n            <Card title=\"Post Engagements\" value={getInsightValue('page_post_engagements')} />\r\n            <Card title=\"Total Impressions\" value={getInsightValue('page_impressions')} />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Card = ({ title, value }) => (\r\n    <div style={{ border: '1px solid #ccc', borderRadius: '5px', padding: '10px', margin: '10px', minWidth: '200px' }}>\r\n        <h3>{title}</h3>\r\n        <p>{value}</p>\r\n    </div>\r\n);\r\n\r\nexport default Insights;\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}