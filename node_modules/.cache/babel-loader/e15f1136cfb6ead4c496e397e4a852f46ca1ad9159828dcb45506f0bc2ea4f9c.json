{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\prana\\\\OneDrive\\\\Documents\\\\Material\\\\facebook\\\\facebook-insights-app\\\\src\\\\components\\\\Insights.js\",\n  _s = $RefreshSig$();\n// MAIN\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const Insights = ({ accessToken, pageId }) => {\n//     const [insights, setInsights] = useState([]);\n//     const [error, setError] = useState(null);\n//     const [loading, setLoading] = useState(true);\n//     const [fancount, setFancount] = useState(\"\");\n\n//     useEffect(() => {\n//         const fetchInsights = async () => {\n//             setLoading(true);\n//             try {\n//                 // Fetch page access token first\n//                 const pageTokenResponse = await axios.get(\n//                     `https://graph.facebook.com/v16.0/${pageId}?fields=access_token&access_token=${accessToken}`\n//                 );\n//                 const pageAccessToken = pageTokenResponse.data.access_token;\n\n//                 // Fetch each metric separately\n//                 //   const metrics = ['page_fan_adds_unique', 'page_views_total', 'page_post_engagements', 'page_fans'];\n//                 const metrics = ['page_fans', 'page_views_total', 'page_post_engagements', 'page_impressions'];\n//                 const insightsData = await Promise.all(metrics.map(async (metric) => {\n//                     try {\n//                         // const response = await axios.get(\n//                         //     `https://graph.facebook.com/v16.0/${pageId}/insights`,\n//                         //     {\n//                         //         params: {\n//                         //             metric: metric,\n//                         //             access_token: pageAccessToken,\n//                         //             period: 'day',\n//                         //             date_preset: 'last_30d'\n//                         //         }\n//                         //     }\n//                         // );\n//                         const response = await axios.get(\n//                             `https://graph.facebook.com/v16.0/${pageId}/insights`,\n//                             {\n//                               params: {\n//                                 metric: metric,\n//                                 access_token: pageAccessToken,\n//                                 period: 'day',\n//                                 date_preset: 'today'  // We only need the current value for page_fans\n//                               }\n//                             }\n//                           );\n//                         return response.data.data[0];\n//                     } catch (error) {\n//                         console.warn(`Failed to fetch ${metric}:`, error.response ? error.response.data : error);\n//                         return { name: metric, values: [{ value: 'N/A' }] };\n//                     }\n\n//                 }));\n\n//                 setInsights(insightsData.filter(insight => insight !== null));\n//                 setError(null);\n//             } catch (error) {\n//                 console.error('Error fetching insights:', error.response ? JSON.stringify(error.response.data, null, 2) : error);\n//                 setError(`Failed to fetch insights: ${error.response ? error.response.data.error.message : error.message}`);\n//                 setInsights([]);\n//             } finally {\n//                 setLoading(false);\n//             }\n//         };\n//         const fetchPageFans = async () => {\n//             try {\n//               const response = await axios.get(\n//                 `https://graph.facebook.com/v16.0/${pageId}`,\n//                 {\n//                   params: {\n//                     fields: 'fan_count',\n//                     access_token: accessToken\n//                   }\n//                 }\n//               );\n//               console.log('Page fans:', response.data.fan_count);\n//               setFancount( response.data.fan_count)\n//             } catch (error) {\n//               console.error('Error fetching page fans:', error);\n//               return 'N/A';\n//             }\n//           };\n\n//         if (pageId && accessToken) {\n//             fetchInsights();\n//             fetchPageFans()\n//         }\n//     }, [accessToken, pageId]);\n\n//     if (loading) {\n//         return <div>Loading insights...</div>;\n//     }\n\n//     if (error) {\n//         return <div>{error}</div>;\n//     }\n\n//     // const getInsightValue = (metricName) => {\n//     //     const metric = insights.find(insight => insight && insight.name === metricName);\n//     //     return metric && metric.values && metric.values[0] ? metric.values[0].value : 'N/A';\n//     // };\n\n//     const getInsightValue = (metricName) => {\n//         const metric = insights.find(insight => insight && insight.name === metricName);\n//         if (!metric) {\n//           console.log(`Metric ${metricName} not found`);\n//           return 'N/A';\n//         }\n//         if (!metric.values || metric.values.length === 0) {\n//           console.log(`No values for metric ${metricName}`);\n//           return 'N/A';\n//         }\n//         const value = metric.values[0].value;\n//         if (value === null || value === undefined) {\n//           console.log(`Null or undefined value for metric ${metricName}`);\n//           return 'N/A';\n//         }\n//         // For 'page_fans', we usually just want the latest value\n//         if (metricName === 'page_fans') {\n//           return value;\n//         }\n//         // For other metrics, you might want to sum up values or handle differently\n//         return Array.isArray(value) ? value.reduce((sum, v) => sum + v, 0) : value;\n//       };\n\n//     return (\n//         <div style={{ display: 'flex', justifyContent: 'space-around', flexWrap: 'wrap' }}>\n//             {/* <Card title=\"New Page Likes\" value={getInsightValue('page_fan_adds_unique')} /> */}\n//             <Card title=\"Total Page Likes\" value={getInsightValue('page_fans')} />\n//             <Card title=\"Total Page Views\" value={getInsightValue('page_views_total')} />\n//             <Card title=\"Post Engagements\" value={getInsightValue('page_post_engagements')} />\n//             <Card title=\"Total Page Fans\" value={getInsightValue('page_fans')} />\n//         </div>\n//     );\n// };\n\n// const Card = ({ title, value }) => (\n//     <div style={{ border: '1px solid #ccc', borderRadius: '5px', padding: '10px', margin: '10px', minWidth: '200px' }}>\n//         <h3>{title}</h3>\n//         <p>{value}</p>\n//     </div>\n// );\n\n// export default Insights;\n\n// *************************************************************************************************************************\n\n// CLAUDE\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const Insights = ({ accessToken, pageId }) => {\n//   const [insights, setInsights] = useState([]);\n//   const [error, setError] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [fancount, setFancount] = useState(\"\");\n\n//   const [startDate, setStartDate] = useState(() => {\n//     const date = new Date();\n//     date.setDate(date.getDate() - 30); // 30 days ago\n//     return date.toISOString().split('T')[0];\n//   });\n\n//   const [endDate, setEndDate] = useState(() => {\n//     const date = new Date();\n//     return date.toISOString().split('T')[0];\n//   });\n\n//   const handleStartDateChange = (event) => {\n//     setStartDate(event.target.value);\n//     console.log(\"New start date:\", event.target.value);\n//   };\n\n//   const handleEndDateChange = (event) => {\n//     setEndDate(event.target.value);\n//     console.log(\"New end date:\", event.target.value);\n//   };\n\n//   const formatDate = (date) => {\n//     if (!date) return null;\n//     const d = new Date(date);\n//     return `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, '0')}-${String(d.getDate()).padStart(2, '0')}`;\n//   };\n\n//   const fetchCurrentFanCount = async () => {\n//     try {\n//       const response = await axios.get(\n//         `https://graph.facebook.com/v16.0/${pageId}`,\n//         {\n//           params: {\n//             fields: 'fan_count',\n//             access_token: accessToken\n//           }\n//         }\n//       );\n//       console.log('Current fan count:', response.data.fan_count);\n//       return response.data.fan_count;\n//     } catch (error) {\n//       console.error('Error fetching current fan count:', error);\n//       return 'N/A';\n//     }\n//   };\n\n//   useEffect(() => {\n//     const fetchInsights = async () => {\n//       setLoading(true);\n//       try {\n//         // Fetch page access token first\n//         const pageTokenResponse = await axios.get(\n//           `https://graph.facebook.com/v16.0/${pageId}?fields=access_token&access_token=${accessToken}`\n//         );\n//         const pageAccessToken = pageTokenResponse.data.access_token;\n\n//         // Fetch each metric separately\n//         // const metrics = ['page_fans', 'page_post_engagements', 'page_impressions', 'page_reactions_total'];\n//         const metrics = ['page_fans', 'page_post_engagements', 'page_impressions', 'page_actions_post_reactions_total'];\n//         const insightsData = await Promise.all(metrics.map(async (metric) => {\n//           try {\n//             const response = await axios.get(\n//               `https://graph.facebook.com/v16.0/${pageId}/insights`,\n//               {\n//                 params: {\n//                   metric: metric,\n//                   access_token: pageAccessToken,\n//                   period: 'total_over_range',\n//                   since: formatDate(startDate) || formatDate(new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)),\n//                   until: formatDate(endDate) || formatDate(new Date())\n//                 }\n//               }\n//             );\n//             console.log(`Raw data for ${metric}:`, response.data);\n//             return response.data.data[0];\n//           } catch (error) {\n//             console.warn(`Failed to fetch ${metric}:`, error.response ? error.response.data : error);\n//             return { name: metric, values: [{ value: 'N/A' }] };\n//           }\n//         }));\n\n//         setInsights(insightsData.filter(insight => insight !== null));\n//         console.log(\"Updated insights:\", insightsData.filter(insight => insight !== null));\n//         setError(null);\n//       } catch (error) {\n//         console.error('Error fetching insights:', error.response ? JSON.stringify(error.response.data, null, 2) : error);\n//         setError(`Failed to fetch insights: ${error.response ? error.response.data.error.message : error.message}`);\n//         setInsights([]);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n//     const fetchPageFans = async () => {\n//       try {\n//         const response = await axios.get(\n//           `https://graph.facebook.com/v16.0/${pageId}`,\n//           {\n//             params: {\n//               fields: 'fan_count',\n//               access_token: accessToken\n//             }\n//           }\n//         );\n//         console.log('Page fans:', response.data.fan_count);\n//         setFancount(response.data.fan_count)\n//       } catch (error) {\n//         console.error('Error fetching page fans:', error);\n//         return 'N/A';\n//       }\n//     };\n\n//     console.log(\"Effect triggered. PageId:\", pageId, \"AccessToken:\", !!accessToken, \"StartDate:\", startDate, \"EndDate:\", endDate);\n//     if (pageId && accessToken) {\n//       fetchInsights();\n//       fetchCurrentFanCount().then(count => setFancount(count));\n//     }\n//   }, [accessToken, pageId, startDate, endDate]);\n\n//   if (loading) {\n//     return <div>Loading insights...</div>;\n//   }\n\n//   if (error) {\n//     return <div>{error}</div>;\n//   }\n\n//   // const getInsightValue = (metricName) => {\n//   //     const metric = insights.find(insight => insight && insight.name === metricName);\n//   //     return metric && metric.values && metric.values[0] ? metric.values[0].value : 'N/A';\n//   // };\n\n//   const getInsightValue = (metricName) => {\n//     const metric = insights.find(insight => insight && insight.name === metricName);\n//     if (!metric) {\n//       console.log(`Metric ${metricName} not found`);\n//       return 'N/A';\n//     }\n//     if (!metric.values || metric.values.length === 0) {\n//       console.log(`No values for metric ${metricName}`);\n//       return 'N/A';\n//     }\n\n//     if (metricName === 'page_fans') {\n//       // For page_fans, we want the most recent value\n//       const lastValue = metric.values[metric.values.length - 1].value;\n//       return typeof lastValue === 'object' ? JSON.stringify(lastValue) : String(lastValue);\n//     }\n\n//     if (metricName === 'page_actions_post_reactions_total') {\n//       // For reactions, we need to sum up all types of reactions\n//       const lastValue = metric.values[metric.values.length - 1].value;\n//       if (typeof lastValue === 'object') {\n//         return Object.values(lastValue).reduce((sum, val) => sum + val, 0).toString();\n//       }\n//       return String(lastValue);\n//     }\n\n//     // For other metrics, sum up all values\n//     const totalValue = metric.values.reduce((sum, item) => {\n//       const itemValue = typeof item.value === 'object' ? Object.values(item.value).reduce((s, v) => s + v, 0) : item.value;\n//       return sum + (itemValue || 0);\n//     }, 0);\n//     return String(totalValue);\n//   };\n\n//   return (\n//     <div style={{ display: 'flex', justifyContent: 'space-around', flexWrap: 'wrap' }}>\n//       <div>\n//         <label>\n//           Start Date:\n//           <input type=\"date\" value={startDate} onChange={handleStartDateChange} />\n//         </label>\n//         <label>\n//           End Date:\n//           <input type=\"date\" value={endDate} onChange={handleEndDateChange} />\n//         </label>\n//       </div>\n//       <Card title=\"Total Followers / Fans\" value={fancount} />\n//       <Card title=\"Total Engagement\" value={getInsightValue('page_post_engagements') || 'N/A'} />\n//       <Card title=\"Total Impressions\" value={getInsightValue('page_impressions') || 'N/A'} />\n//       <Card title=\"Total Reactions\" value={getInsightValue('page_actions_post_reactions_total') || 'N/A'} />\n//     </div>\n//   );\n// };\n\n// const Card = ({ title, value }) => (\n//   <div style={{ border: '1px solid #ccc', borderRadius: '5px', padding: '10px', margin: '10px', minWidth: '200px' }}>\n//     <h3>{title}</h3>\n//     <p>{typeof value === 'object' ? JSON.stringify(value) : value}</p>\n//   </div>\n// );\n\n// export default Insights;\n\n// ******************************************************************************************\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Insights = ({\n  accessToken,\n  pageId,\n  startDate,\n  endDate\n}) => {\n  _s();\n  const [insights, setInsights] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchInsights = async () => {\n      setLoading(true);\n      try {\n        // Fetch page access token first\n        const pageTokenResponse = await axios.get(`https://graph.facebook.com/v16.0/${pageId}?fields=access_token&access_token=${accessToken}`);\n        const pageAccessToken = pageTokenResponse.data.access_token;\n\n        // Fetch each metric separately\n        const metrics = ['page_fans', 'page_views_total', 'page_post_engagements', 'page_impressions'];\n        const insightsData = await Promise.all(metrics.map(async metric => {\n          try {\n            const response = await axios.get(`https://graph.facebook.com/v16.0/${pageId}/insights`, {\n              params: {\n                metric: metric,\n                access_token: pageAccessToken,\n                period: 'day',\n                since: startDate,\n                until: endDate\n              }\n            });\n            return response.data.data[0];\n          } catch (error) {\n            console.warn(`Failed to fetch ${metric}:`, error.response ? error.response.data : error);\n            return {\n              name: metric,\n              values: [{\n                value: 'N/A'\n              }]\n            };\n          }\n        }));\n        setInsights(insightsData.filter(insight => insight !== null));\n        setError(null);\n      } catch (error) {\n        console.error('Error fetching insights:', error.response ? JSON.stringify(error.response.data, null, 2) : error);\n        setError(`Failed to fetch insights: ${error.response ? error.response.data.error.message : error.message}`);\n        setInsights([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (accessToken && pageId && startDate && endDate) {\n      fetchInsights();\n    }\n  }, [accessToken, pageId, startDate, endDate]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading insights...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 418,\n      columnNumber: 12\n    }, this);\n  }\n  const getInsightValue = metricName => {\n    const metric = insights.find(insight => insight && insight.name === metricName);\n    if (!metric) {\n      console.log(`Metric ${metricName} not found`);\n      return 'N/A';\n    }\n    if (!metric.values || metric.values.length === 0) {\n      console.log(`No values for metric ${metricName}`);\n      return 'N/A';\n    }\n    const value = metric.values[0].value;\n    if (value === null || value === undefined) {\n      console.log(`Null or undefined value for metric ${metricName}`);\n      return 'N/A';\n    }\n    return Array.isArray(value) ? value.reduce((sum, v) => sum + v, 0) : value;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'space-around',\n      flexWrap: 'wrap'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      title: \"Total Followers / Fans\",\n      value: getInsightValue('page_fans')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      title: \"Total Engagement\",\n      value: getInsightValue('page_post_engagements')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      title: \"Total Impressions\",\n      value: getInsightValue('page_impressions')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      title: \"Total Reactions\",\n      value: getInsightValue('page_views_total')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 440,\n    columnNumber: 5\n  }, this);\n};\n_s(Insights, \"s5yBMWHmuGeuZdU7hHvRPTz38GE=\");\n_c = Insights;\nconst Card = ({\n  title,\n  value\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  style: {\n    border: '1px solid #ccc',\n    borderRadius: '5px',\n    padding: '10px',\n    margin: '10px',\n    minWidth: '200px'\n  },\n  children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n    children: title\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 451,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 452,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 450,\n  columnNumber: 3\n}, this);\n_c2 = Card;\nexport default Insights;\nvar _c, _c2;\n$RefreshReg$(_c, \"Insights\");\n$RefreshReg$(_c2, \"Card\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Insights","accessToken","pageId","startDate","endDate","_s","insights","setInsights","error","setError","loading","setLoading","fetchInsights","pageTokenResponse","get","pageAccessToken","data","access_token","metrics","insightsData","Promise","all","map","metric","response","params","period","since","until","console","warn","name","values","value","filter","insight","JSON","stringify","message","children","fileName","_jsxFileName","lineNumber","columnNumber","getInsightValue","metricName","find","log","length","undefined","Array","isArray","reduce","sum","v","style","display","justifyContent","flexWrap","Card","title","_c","border","borderRadius","padding","margin","minWidth","_c2","$RefreshReg$"],"sources":["C:/Users/prana/OneDrive/Documents/Material/facebook/facebook-insights-app/src/components/Insights.js"],"sourcesContent":["// MAIN\r\n// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n\r\n// const Insights = ({ accessToken, pageId }) => {\r\n//     const [insights, setInsights] = useState([]);\r\n//     const [error, setError] = useState(null);\r\n//     const [loading, setLoading] = useState(true);\r\n//     const [fancount, setFancount] = useState(\"\");\r\n\r\n//     useEffect(() => {\r\n//         const fetchInsights = async () => {\r\n//             setLoading(true);\r\n//             try {\r\n//                 // Fetch page access token first\r\n//                 const pageTokenResponse = await axios.get(\r\n//                     `https://graph.facebook.com/v16.0/${pageId}?fields=access_token&access_token=${accessToken}`\r\n//                 );\r\n//                 const pageAccessToken = pageTokenResponse.data.access_token;\r\n\r\n//                 // Fetch each metric separately\r\n//                 //   const metrics = ['page_fan_adds_unique', 'page_views_total', 'page_post_engagements', 'page_fans'];\r\n//                 const metrics = ['page_fans', 'page_views_total', 'page_post_engagements', 'page_impressions'];\r\n//                 const insightsData = await Promise.all(metrics.map(async (metric) => {\r\n//                     try {\r\n//                         // const response = await axios.get(\r\n//                         //     `https://graph.facebook.com/v16.0/${pageId}/insights`,\r\n//                         //     {\r\n//                         //         params: {\r\n//                         //             metric: metric,\r\n//                         //             access_token: pageAccessToken,\r\n//                         //             period: 'day',\r\n//                         //             date_preset: 'last_30d'\r\n//                         //         }\r\n//                         //     }\r\n//                         // );\r\n//                         const response = await axios.get(\r\n//                             `https://graph.facebook.com/v16.0/${pageId}/insights`,\r\n//                             {\r\n//                               params: {\r\n//                                 metric: metric,\r\n//                                 access_token: pageAccessToken,\r\n//                                 period: 'day',\r\n//                                 date_preset: 'today'  // We only need the current value for page_fans\r\n//                               }\r\n//                             }\r\n//                           );\r\n//                         return response.data.data[0];\r\n//                     } catch (error) {\r\n//                         console.warn(`Failed to fetch ${metric}:`, error.response ? error.response.data : error);\r\n//                         return { name: metric, values: [{ value: 'N/A' }] };\r\n//                     }\r\n\r\n//                 }));\r\n\r\n//                 setInsights(insightsData.filter(insight => insight !== null));\r\n//                 setError(null);\r\n//             } catch (error) {\r\n//                 console.error('Error fetching insights:', error.response ? JSON.stringify(error.response.data, null, 2) : error);\r\n//                 setError(`Failed to fetch insights: ${error.response ? error.response.data.error.message : error.message}`);\r\n//                 setInsights([]);\r\n//             } finally {\r\n//                 setLoading(false);\r\n//             }\r\n//         };\r\n//         const fetchPageFans = async () => {\r\n//             try {\r\n//               const response = await axios.get(\r\n//                 `https://graph.facebook.com/v16.0/${pageId}`,\r\n//                 {\r\n//                   params: {\r\n//                     fields: 'fan_count',\r\n//                     access_token: accessToken\r\n//                   }\r\n//                 }\r\n//               );\r\n//               console.log('Page fans:', response.data.fan_count);\r\n//               setFancount( response.data.fan_count)\r\n//             } catch (error) {\r\n//               console.error('Error fetching page fans:', error);\r\n//               return 'N/A';\r\n//             }\r\n//           };\r\n\r\n//         if (pageId && accessToken) {\r\n//             fetchInsights();\r\n//             fetchPageFans()\r\n//         }\r\n//     }, [accessToken, pageId]);\r\n\r\n//     if (loading) {\r\n//         return <div>Loading insights...</div>;\r\n//     }\r\n\r\n//     if (error) {\r\n//         return <div>{error}</div>;\r\n//     }\r\n\r\n//     // const getInsightValue = (metricName) => {\r\n//     //     const metric = insights.find(insight => insight && insight.name === metricName);\r\n//     //     return metric && metric.values && metric.values[0] ? metric.values[0].value : 'N/A';\r\n//     // };\r\n\r\n//     const getInsightValue = (metricName) => {\r\n//         const metric = insights.find(insight => insight && insight.name === metricName);\r\n//         if (!metric) {\r\n//           console.log(`Metric ${metricName} not found`);\r\n//           return 'N/A';\r\n//         }\r\n//         if (!metric.values || metric.values.length === 0) {\r\n//           console.log(`No values for metric ${metricName}`);\r\n//           return 'N/A';\r\n//         }\r\n//         const value = metric.values[0].value;\r\n//         if (value === null || value === undefined) {\r\n//           console.log(`Null or undefined value for metric ${metricName}`);\r\n//           return 'N/A';\r\n//         }\r\n//         // For 'page_fans', we usually just want the latest value\r\n//         if (metricName === 'page_fans') {\r\n//           return value;\r\n//         }\r\n//         // For other metrics, you might want to sum up values or handle differently\r\n//         return Array.isArray(value) ? value.reduce((sum, v) => sum + v, 0) : value;\r\n//       };\r\n\r\n//     return (\r\n//         <div style={{ display: 'flex', justifyContent: 'space-around', flexWrap: 'wrap' }}>\r\n//             {/* <Card title=\"New Page Likes\" value={getInsightValue('page_fan_adds_unique')} /> */}\r\n//             <Card title=\"Total Page Likes\" value={getInsightValue('page_fans')} />\r\n//             <Card title=\"Total Page Views\" value={getInsightValue('page_views_total')} />\r\n//             <Card title=\"Post Engagements\" value={getInsightValue('page_post_engagements')} />\r\n//             <Card title=\"Total Page Fans\" value={getInsightValue('page_fans')} />\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// const Card = ({ title, value }) => (\r\n//     <div style={{ border: '1px solid #ccc', borderRadius: '5px', padding: '10px', margin: '10px', minWidth: '200px' }}>\r\n//         <h3>{title}</h3>\r\n//         <p>{value}</p>\r\n//     </div>\r\n// );\r\n\r\n// export default Insights;\r\n\r\n// *************************************************************************************************************************\r\n\r\n// CLAUDE\r\n// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n\r\n// const Insights = ({ accessToken, pageId }) => {\r\n//   const [insights, setInsights] = useState([]);\r\n//   const [error, setError] = useState(null);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [fancount, setFancount] = useState(\"\");\r\n\r\n//   const [startDate, setStartDate] = useState(() => {\r\n//     const date = new Date();\r\n//     date.setDate(date.getDate() - 30); // 30 days ago\r\n//     return date.toISOString().split('T')[0];\r\n//   });\r\n\r\n//   const [endDate, setEndDate] = useState(() => {\r\n//     const date = new Date();\r\n//     return date.toISOString().split('T')[0];\r\n//   });\r\n\r\n//   const handleStartDateChange = (event) => {\r\n//     setStartDate(event.target.value);\r\n//     console.log(\"New start date:\", event.target.value);\r\n//   };\r\n\r\n//   const handleEndDateChange = (event) => {\r\n//     setEndDate(event.target.value);\r\n//     console.log(\"New end date:\", event.target.value);\r\n//   };\r\n\r\n//   const formatDate = (date) => {\r\n//     if (!date) return null;\r\n//     const d = new Date(date);\r\n//     return `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, '0')}-${String(d.getDate()).padStart(2, '0')}`;\r\n//   };\r\n\r\n//   const fetchCurrentFanCount = async () => {\r\n//     try {\r\n//       const response = await axios.get(\r\n//         `https://graph.facebook.com/v16.0/${pageId}`,\r\n//         {\r\n//           params: {\r\n//             fields: 'fan_count',\r\n//             access_token: accessToken\r\n//           }\r\n//         }\r\n//       );\r\n//       console.log('Current fan count:', response.data.fan_count);\r\n//       return response.data.fan_count;\r\n//     } catch (error) {\r\n//       console.error('Error fetching current fan count:', error);\r\n//       return 'N/A';\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     const fetchInsights = async () => {\r\n//       setLoading(true);\r\n//       try {\r\n//         // Fetch page access token first\r\n//         const pageTokenResponse = await axios.get(\r\n//           `https://graph.facebook.com/v16.0/${pageId}?fields=access_token&access_token=${accessToken}`\r\n//         );\r\n//         const pageAccessToken = pageTokenResponse.data.access_token;\r\n\r\n//         // Fetch each metric separately\r\n//         // const metrics = ['page_fans', 'page_post_engagements', 'page_impressions', 'page_reactions_total'];\r\n//         const metrics = ['page_fans', 'page_post_engagements', 'page_impressions', 'page_actions_post_reactions_total'];\r\n//         const insightsData = await Promise.all(metrics.map(async (metric) => {\r\n//           try {\r\n//             const response = await axios.get(\r\n//               `https://graph.facebook.com/v16.0/${pageId}/insights`,\r\n//               {\r\n//                 params: {\r\n//                   metric: metric,\r\n//                   access_token: pageAccessToken,\r\n//                   period: 'total_over_range',\r\n//                   since: formatDate(startDate) || formatDate(new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)),\r\n//                   until: formatDate(endDate) || formatDate(new Date())\r\n//                 }\r\n//               }\r\n//             );\r\n//             console.log(`Raw data for ${metric}:`, response.data);\r\n//             return response.data.data[0];\r\n//           } catch (error) {\r\n//             console.warn(`Failed to fetch ${metric}:`, error.response ? error.response.data : error);\r\n//             return { name: metric, values: [{ value: 'N/A' }] };\r\n//           }\r\n//         }));\r\n\r\n//         setInsights(insightsData.filter(insight => insight !== null));\r\n//         console.log(\"Updated insights:\", insightsData.filter(insight => insight !== null));\r\n//         setError(null);\r\n//       } catch (error) {\r\n//         console.error('Error fetching insights:', error.response ? JSON.stringify(error.response.data, null, 2) : error);\r\n//         setError(`Failed to fetch insights: ${error.response ? error.response.data.error.message : error.message}`);\r\n//         setInsights([]);\r\n//       } finally {\r\n//         setLoading(false);\r\n//       }\r\n//     };\r\n//     const fetchPageFans = async () => {\r\n//       try {\r\n//         const response = await axios.get(\r\n//           `https://graph.facebook.com/v16.0/${pageId}`,\r\n//           {\r\n//             params: {\r\n//               fields: 'fan_count',\r\n//               access_token: accessToken\r\n//             }\r\n//           }\r\n//         );\r\n//         console.log('Page fans:', response.data.fan_count);\r\n//         setFancount(response.data.fan_count)\r\n//       } catch (error) {\r\n//         console.error('Error fetching page fans:', error);\r\n//         return 'N/A';\r\n//       }\r\n//     };\r\n\r\n//     console.log(\"Effect triggered. PageId:\", pageId, \"AccessToken:\", !!accessToken, \"StartDate:\", startDate, \"EndDate:\", endDate);\r\n//     if (pageId && accessToken) {\r\n//       fetchInsights();\r\n//       fetchCurrentFanCount().then(count => setFancount(count));\r\n//     }\r\n//   }, [accessToken, pageId, startDate, endDate]);\r\n\r\n//   if (loading) {\r\n//     return <div>Loading insights...</div>;\r\n//   }\r\n\r\n//   if (error) {\r\n//     return <div>{error}</div>;\r\n//   }\r\n\r\n//   // const getInsightValue = (metricName) => {\r\n//   //     const metric = insights.find(insight => insight && insight.name === metricName);\r\n//   //     return metric && metric.values && metric.values[0] ? metric.values[0].value : 'N/A';\r\n//   // };\r\n\r\n//   const getInsightValue = (metricName) => {\r\n//     const metric = insights.find(insight => insight && insight.name === metricName);\r\n//     if (!metric) {\r\n//       console.log(`Metric ${metricName} not found`);\r\n//       return 'N/A';\r\n//     }\r\n//     if (!metric.values || metric.values.length === 0) {\r\n//       console.log(`No values for metric ${metricName}`);\r\n//       return 'N/A';\r\n//     }\r\n    \r\n//     if (metricName === 'page_fans') {\r\n//       // For page_fans, we want the most recent value\r\n//       const lastValue = metric.values[metric.values.length - 1].value;\r\n//       return typeof lastValue === 'object' ? JSON.stringify(lastValue) : String(lastValue);\r\n//     }\r\n    \r\n//     if (metricName === 'page_actions_post_reactions_total') {\r\n//       // For reactions, we need to sum up all types of reactions\r\n//       const lastValue = metric.values[metric.values.length - 1].value;\r\n//       if (typeof lastValue === 'object') {\r\n//         return Object.values(lastValue).reduce((sum, val) => sum + val, 0).toString();\r\n//       }\r\n//       return String(lastValue);\r\n//     }\r\n    \r\n//     // For other metrics, sum up all values\r\n//     const totalValue = metric.values.reduce((sum, item) => {\r\n//       const itemValue = typeof item.value === 'object' ? Object.values(item.value).reduce((s, v) => s + v, 0) : item.value;\r\n//       return sum + (itemValue || 0);\r\n//     }, 0);\r\n//     return String(totalValue);\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ display: 'flex', justifyContent: 'space-around', flexWrap: 'wrap' }}>\r\n//       <div>\r\n//         <label>\r\n//           Start Date:\r\n//           <input type=\"date\" value={startDate} onChange={handleStartDateChange} />\r\n//         </label>\r\n//         <label>\r\n//           End Date:\r\n//           <input type=\"date\" value={endDate} onChange={handleEndDateChange} />\r\n//         </label>\r\n//       </div>\r\n//       <Card title=\"Total Followers / Fans\" value={fancount} />\r\n//       <Card title=\"Total Engagement\" value={getInsightValue('page_post_engagements') || 'N/A'} />\r\n//       <Card title=\"Total Impressions\" value={getInsightValue('page_impressions') || 'N/A'} />\r\n//       <Card title=\"Total Reactions\" value={getInsightValue('page_actions_post_reactions_total') || 'N/A'} />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const Card = ({ title, value }) => (\r\n//   <div style={{ border: '1px solid #ccc', borderRadius: '5px', padding: '10px', margin: '10px', minWidth: '200px' }}>\r\n//     <h3>{title}</h3>\r\n//     <p>{typeof value === 'object' ? JSON.stringify(value) : value}</p>\r\n//   </div>\r\n// );\r\n\r\n// export default Insights;\r\n\r\n// ******************************************************************************************\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Insights = ({ accessToken, pageId, startDate, endDate }) => {\r\n  const [insights, setInsights] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  \r\n\r\n  useEffect(() => {\r\n    const fetchInsights = async () => {\r\n      setLoading(true);\r\n      try {\r\n        // Fetch page access token first\r\n        const pageTokenResponse = await axios.get(\r\n          `https://graph.facebook.com/v16.0/${pageId}?fields=access_token&access_token=${accessToken}`\r\n        );\r\n        const pageAccessToken = pageTokenResponse.data.access_token;\r\n\r\n        // Fetch each metric separately\r\n        const metrics = ['page_fans', 'page_views_total', 'page_post_engagements', 'page_impressions'];\r\n        const insightsData = await Promise.all(metrics.map(async (metric) => {\r\n          try {\r\n            const response = await axios.get(\r\n              `https://graph.facebook.com/v16.0/${pageId}/insights`,\r\n              {\r\n                params: {\r\n                  metric: metric,\r\n                  access_token: pageAccessToken,\r\n                  period: 'day',\r\n                  since: startDate,\r\n                  until: endDate\r\n                }\r\n              }\r\n            );\r\n            return response.data.data[0];\r\n          } catch (error) {\r\n            console.warn(`Failed to fetch ${metric}:`, error.response ? error.response.data : error);\r\n            return { name: metric, values: [{ value: 'N/A' }] };\r\n          }\r\n        }));\r\n\r\n        setInsights(insightsData.filter(insight => insight !== null));\r\n        setError(null);\r\n      } catch (error) {\r\n        console.error('Error fetching insights:', error.response ? JSON.stringify(error.response.data, null, 2) : error);\r\n        setError(`Failed to fetch insights: ${error.response ? error.response.data.error.message : error.message}`);\r\n        setInsights([]);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    if (accessToken && pageId && startDate && endDate) {\r\n      fetchInsights();\r\n    }\r\n  }, [accessToken, pageId, startDate, endDate]);\r\n\r\n  if (loading) {\r\n    return <div>Loading insights...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div>{error}</div>;\r\n  }\r\n\r\n  const getInsightValue = (metricName) => {\r\n    const metric = insights.find(insight => insight && insight.name === metricName);\r\n    if (!metric) {\r\n      console.log(`Metric ${metricName} not found`);\r\n      return 'N/A';\r\n    }\r\n    if (!metric.values || metric.values.length === 0) {\r\n      console.log(`No values for metric ${metricName}`);\r\n      return 'N/A';\r\n    }\r\n    const value = metric.values[0].value;\r\n    if (value === null || value === undefined) {\r\n      console.log(`Null or undefined value for metric ${metricName}`);\r\n      return 'N/A';\r\n    }\r\n    return Array.isArray(value) ? value.reduce((sum, v) => sum + v, 0) : value;\r\n  };\r\n\r\n  return (\r\n    <div style={{ display: 'flex', justifyContent: 'space-around', flexWrap: 'wrap' }}>\r\n      <Card title=\"Total Followers / Fans\" value={getInsightValue('page_fans')} />\r\n      <Card title=\"Total Engagement\" value={getInsightValue('page_post_engagements')} />\r\n      <Card title=\"Total Impressions\" value={getInsightValue('page_impressions')} />\r\n      <Card title=\"Total Reactions\" value={getInsightValue('page_views_total')} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Card = ({ title, value }) => (\r\n  <div style={{ border: '1px solid #ccc', borderRadius: '5px', padding: '10px', margin: '10px', minWidth: '200px' }}>\r\n    <h3>{title}</h3>\r\n    <p>{value}</p>\r\n  </div>\r\n);\r\n\r\nexport default Insights;\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}